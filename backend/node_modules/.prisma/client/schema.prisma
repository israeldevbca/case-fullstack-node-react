generator client {
  provider = "prisma-client-js"
  // Se der problema no Alpine, descomente a linha abaixo:
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LifeStatus {
  ALIVE
  DEAD
  DISABLED
}

enum AllocationType {
  FINANCIAL
  REAL_ESTATE
}

enum MovementKind {
  INCOME
  EXPENSE
}

enum Frequency {
  ONE_TIME
  MONTHLY
  YEARLY
}

enum InsuranceType {
  LIFE
  DISABILITY
}

model Simulation {
  id             String       @id @default(cuid())
  name           String
  version        Int          @default(1)
  isMain         Boolean      @default(false)
  isSituationNow Boolean      @default(false)
  startDate      DateTime
  realRate       Float        @default(0.04)
  lifeStatus     LifeStatus   @default(ALIVE)
  parentId       String?
  parent         Simulation?  @relation("VersionParent", fields: [parentId], references: [id])
  children       Simulation[] @relation("VersionParent")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  allocations    Allocation[]
  movements      Movement[]
  insurances     Insurance[]

  @@unique([name, version])
}

model Allocation {
  id           String             @id @default(cuid())
  simulationId String
  type         AllocationType
  name         String
  createdAt    DateTime           @default(now())
  records      AllocationRecord[]
  simulation   Simulation         @relation(fields: [simulationId], references: [id])

  @@index([simulationId])
}

model AllocationRecord {
  id               String     @id @default(cuid())
  allocationId     String
  date             DateTime
  value            Decimal    @db.Decimal(18, 2)
  hasLoan          Boolean    @default(false)
  loanStart        DateTime?
  loanInstallments Int?
  loanRate         Float?
  downPayment      Decimal?   @db.Decimal(18, 2)
  allocation       Allocation @relation(fields: [allocationId], references: [id])

  @@index([allocationId, date])
}

model Movement {
  id           String       @id @default(cuid())
  simulationId String
  kind         MovementKind
  name         String
  amount       Decimal      @db.Decimal(18, 2)
  frequency    Frequency
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime     @default(now())
  simulation   Simulation   @relation(fields: [simulationId], references: [id])

  @@index([simulationId])
}

model Insurance {
  id             String        @id @default(cuid())
  simulationId   String
  name           String
  type           InsuranceType
  startDate      DateTime
  durationMonths Int
  premiumMonth   Decimal       @db.Decimal(18, 2)
  insuredValue   Decimal       @db.Decimal(18, 2)
  simulation     Simulation    @relation(fields: [simulationId], references: [id])

  @@index([simulationId])
}
