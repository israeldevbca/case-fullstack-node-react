
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Simulation
 * 
 */
export type Simulation = $Result.DefaultSelection<Prisma.$SimulationPayload>
/**
 * Model Allocation
 * 
 */
export type Allocation = $Result.DefaultSelection<Prisma.$AllocationPayload>
/**
 * Model AllocationRecord
 * 
 */
export type AllocationRecord = $Result.DefaultSelection<Prisma.$AllocationRecordPayload>
/**
 * Model Movement
 * 
 */
export type Movement = $Result.DefaultSelection<Prisma.$MovementPayload>
/**
 * Model Insurance
 * 
 */
export type Insurance = $Result.DefaultSelection<Prisma.$InsurancePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const LifeStatus: {
  ALIVE: 'ALIVE',
  DEAD: 'DEAD',
  DISABLED: 'DISABLED'
};

export type LifeStatus = (typeof LifeStatus)[keyof typeof LifeStatus]


export const AllocationType: {
  FINANCIAL: 'FINANCIAL',
  REAL_ESTATE: 'REAL_ESTATE'
};

export type AllocationType = (typeof AllocationType)[keyof typeof AllocationType]


export const MovementKind: {
  INCOME: 'INCOME',
  EXPENSE: 'EXPENSE'
};

export type MovementKind = (typeof MovementKind)[keyof typeof MovementKind]


export const Frequency: {
  ONE_TIME: 'ONE_TIME',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

export type Frequency = (typeof Frequency)[keyof typeof Frequency]


export const InsuranceType: {
  LIFE: 'LIFE',
  DISABILITY: 'DISABILITY'
};

export type InsuranceType = (typeof InsuranceType)[keyof typeof InsuranceType]

}

export type LifeStatus = $Enums.LifeStatus

export const LifeStatus: typeof $Enums.LifeStatus

export type AllocationType = $Enums.AllocationType

export const AllocationType: typeof $Enums.AllocationType

export type MovementKind = $Enums.MovementKind

export const MovementKind: typeof $Enums.MovementKind

export type Frequency = $Enums.Frequency

export const Frequency: typeof $Enums.Frequency

export type InsuranceType = $Enums.InsuranceType

export const InsuranceType: typeof $Enums.InsuranceType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Simulations
 * const simulations = await prisma.simulation.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Simulations
   * const simulations = await prisma.simulation.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.simulation`: Exposes CRUD operations for the **Simulation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Simulations
    * const simulations = await prisma.simulation.findMany()
    * ```
    */
  get simulation(): Prisma.SimulationDelegate<ExtArgs>;

  /**
   * `prisma.allocation`: Exposes CRUD operations for the **Allocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allocations
    * const allocations = await prisma.allocation.findMany()
    * ```
    */
  get allocation(): Prisma.AllocationDelegate<ExtArgs>;

  /**
   * `prisma.allocationRecord`: Exposes CRUD operations for the **AllocationRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AllocationRecords
    * const allocationRecords = await prisma.allocationRecord.findMany()
    * ```
    */
  get allocationRecord(): Prisma.AllocationRecordDelegate<ExtArgs>;

  /**
   * `prisma.movement`: Exposes CRUD operations for the **Movement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movements
    * const movements = await prisma.movement.findMany()
    * ```
    */
  get movement(): Prisma.MovementDelegate<ExtArgs>;

  /**
   * `prisma.insurance`: Exposes CRUD operations for the **Insurance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Insurances
    * const insurances = await prisma.insurance.findMany()
    * ```
    */
  get insurance(): Prisma.InsuranceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Simulation: 'Simulation',
    Allocation: 'Allocation',
    AllocationRecord: 'AllocationRecord',
    Movement: 'Movement',
    Insurance: 'Insurance'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "simulation" | "allocation" | "allocationRecord" | "movement" | "insurance"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Simulation: {
        payload: Prisma.$SimulationPayload<ExtArgs>
        fields: Prisma.SimulationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SimulationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SimulationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload>
          }
          findFirst: {
            args: Prisma.SimulationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SimulationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload>
          }
          findMany: {
            args: Prisma.SimulationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload>[]
          }
          create: {
            args: Prisma.SimulationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload>
          }
          createMany: {
            args: Prisma.SimulationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SimulationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload>[]
          }
          delete: {
            args: Prisma.SimulationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload>
          }
          update: {
            args: Prisma.SimulationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload>
          }
          deleteMany: {
            args: Prisma.SimulationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SimulationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SimulationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimulationPayload>
          }
          aggregate: {
            args: Prisma.SimulationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSimulation>
          }
          groupBy: {
            args: Prisma.SimulationGroupByArgs<ExtArgs>
            result: $Utils.Optional<SimulationGroupByOutputType>[]
          }
          count: {
            args: Prisma.SimulationCountArgs<ExtArgs>
            result: $Utils.Optional<SimulationCountAggregateOutputType> | number
          }
        }
      }
      Allocation: {
        payload: Prisma.$AllocationPayload<ExtArgs>
        fields: Prisma.AllocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          findFirst: {
            args: Prisma.AllocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          findMany: {
            args: Prisma.AllocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>[]
          }
          create: {
            args: Prisma.AllocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          createMany: {
            args: Prisma.AllocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AllocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>[]
          }
          delete: {
            args: Prisma.AllocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          update: {
            args: Prisma.AllocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          deleteMany: {
            args: Prisma.AllocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AllocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AllocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          aggregate: {
            args: Prisma.AllocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAllocation>
          }
          groupBy: {
            args: Prisma.AllocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AllocationCountArgs<ExtArgs>
            result: $Utils.Optional<AllocationCountAggregateOutputType> | number
          }
        }
      }
      AllocationRecord: {
        payload: Prisma.$AllocationRecordPayload<ExtArgs>
        fields: Prisma.AllocationRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllocationRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllocationRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload>
          }
          findFirst: {
            args: Prisma.AllocationRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllocationRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload>
          }
          findMany: {
            args: Prisma.AllocationRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload>[]
          }
          create: {
            args: Prisma.AllocationRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload>
          }
          createMany: {
            args: Prisma.AllocationRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AllocationRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload>[]
          }
          delete: {
            args: Prisma.AllocationRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload>
          }
          update: {
            args: Prisma.AllocationRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload>
          }
          deleteMany: {
            args: Prisma.AllocationRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AllocationRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AllocationRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationRecordPayload>
          }
          aggregate: {
            args: Prisma.AllocationRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAllocationRecord>
          }
          groupBy: {
            args: Prisma.AllocationRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllocationRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.AllocationRecordCountArgs<ExtArgs>
            result: $Utils.Optional<AllocationRecordCountAggregateOutputType> | number
          }
        }
      }
      Movement: {
        payload: Prisma.$MovementPayload<ExtArgs>
        fields: Prisma.MovementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          findFirst: {
            args: Prisma.MovementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          findMany: {
            args: Prisma.MovementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>[]
          }
          create: {
            args: Prisma.MovementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          createMany: {
            args: Prisma.MovementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>[]
          }
          delete: {
            args: Prisma.MovementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          update: {
            args: Prisma.MovementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          deleteMany: {
            args: Prisma.MovementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MovementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovementPayload>
          }
          aggregate: {
            args: Prisma.MovementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovement>
          }
          groupBy: {
            args: Prisma.MovementGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovementGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovementCountArgs<ExtArgs>
            result: $Utils.Optional<MovementCountAggregateOutputType> | number
          }
        }
      }
      Insurance: {
        payload: Prisma.$InsurancePayload<ExtArgs>
        fields: Prisma.InsuranceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsuranceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsuranceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          findFirst: {
            args: Prisma.InsuranceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsuranceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          findMany: {
            args: Prisma.InsuranceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>[]
          }
          create: {
            args: Prisma.InsuranceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          createMany: {
            args: Prisma.InsuranceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InsuranceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>[]
          }
          delete: {
            args: Prisma.InsuranceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          update: {
            args: Prisma.InsuranceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          deleteMany: {
            args: Prisma.InsuranceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsuranceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InsuranceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          aggregate: {
            args: Prisma.InsuranceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsurance>
          }
          groupBy: {
            args: Prisma.InsuranceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsuranceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsuranceCountArgs<ExtArgs>
            result: $Utils.Optional<InsuranceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SimulationCountOutputType
   */

  export type SimulationCountOutputType = {
    children: number
    allocations: number
    movements: number
    insurances: number
  }

  export type SimulationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | SimulationCountOutputTypeCountChildrenArgs
    allocations?: boolean | SimulationCountOutputTypeCountAllocationsArgs
    movements?: boolean | SimulationCountOutputTypeCountMovementsArgs
    insurances?: boolean | SimulationCountOutputTypeCountInsurancesArgs
  }

  // Custom InputTypes
  /**
   * SimulationCountOutputType without action
   */
  export type SimulationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimulationCountOutputType
     */
    select?: SimulationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SimulationCountOutputType without action
   */
  export type SimulationCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimulationWhereInput
  }

  /**
   * SimulationCountOutputType without action
   */
  export type SimulationCountOutputTypeCountAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocationWhereInput
  }

  /**
   * SimulationCountOutputType without action
   */
  export type SimulationCountOutputTypeCountMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovementWhereInput
  }

  /**
   * SimulationCountOutputType without action
   */
  export type SimulationCountOutputTypeCountInsurancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsuranceWhereInput
  }


  /**
   * Count Type AllocationCountOutputType
   */

  export type AllocationCountOutputType = {
    records: number
  }

  export type AllocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    records?: boolean | AllocationCountOutputTypeCountRecordsArgs
  }

  // Custom InputTypes
  /**
   * AllocationCountOutputType without action
   */
  export type AllocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationCountOutputType
     */
    select?: AllocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AllocationCountOutputType without action
   */
  export type AllocationCountOutputTypeCountRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocationRecordWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Simulation
   */

  export type AggregateSimulation = {
    _count: SimulationCountAggregateOutputType | null
    _avg: SimulationAvgAggregateOutputType | null
    _sum: SimulationSumAggregateOutputType | null
    _min: SimulationMinAggregateOutputType | null
    _max: SimulationMaxAggregateOutputType | null
  }

  export type SimulationAvgAggregateOutputType = {
    version: number | null
    realRate: number | null
  }

  export type SimulationSumAggregateOutputType = {
    version: number | null
    realRate: number | null
  }

  export type SimulationMinAggregateOutputType = {
    id: string | null
    name: string | null
    version: number | null
    isMain: boolean | null
    isSituationNow: boolean | null
    startDate: Date | null
    realRate: number | null
    lifeStatus: $Enums.LifeStatus | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SimulationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    version: number | null
    isMain: boolean | null
    isSituationNow: boolean | null
    startDate: Date | null
    realRate: number | null
    lifeStatus: $Enums.LifeStatus | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SimulationCountAggregateOutputType = {
    id: number
    name: number
    version: number
    isMain: number
    isSituationNow: number
    startDate: number
    realRate: number
    lifeStatus: number
    parentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SimulationAvgAggregateInputType = {
    version?: true
    realRate?: true
  }

  export type SimulationSumAggregateInputType = {
    version?: true
    realRate?: true
  }

  export type SimulationMinAggregateInputType = {
    id?: true
    name?: true
    version?: true
    isMain?: true
    isSituationNow?: true
    startDate?: true
    realRate?: true
    lifeStatus?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SimulationMaxAggregateInputType = {
    id?: true
    name?: true
    version?: true
    isMain?: true
    isSituationNow?: true
    startDate?: true
    realRate?: true
    lifeStatus?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SimulationCountAggregateInputType = {
    id?: true
    name?: true
    version?: true
    isMain?: true
    isSituationNow?: true
    startDate?: true
    realRate?: true
    lifeStatus?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SimulationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Simulation to aggregate.
     */
    where?: SimulationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simulations to fetch.
     */
    orderBy?: SimulationOrderByWithRelationInput | SimulationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SimulationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simulations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simulations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Simulations
    **/
    _count?: true | SimulationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SimulationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SimulationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SimulationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SimulationMaxAggregateInputType
  }

  export type GetSimulationAggregateType<T extends SimulationAggregateArgs> = {
        [P in keyof T & keyof AggregateSimulation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSimulation[P]>
      : GetScalarType<T[P], AggregateSimulation[P]>
  }




  export type SimulationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimulationWhereInput
    orderBy?: SimulationOrderByWithAggregationInput | SimulationOrderByWithAggregationInput[]
    by: SimulationScalarFieldEnum[] | SimulationScalarFieldEnum
    having?: SimulationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SimulationCountAggregateInputType | true
    _avg?: SimulationAvgAggregateInputType
    _sum?: SimulationSumAggregateInputType
    _min?: SimulationMinAggregateInputType
    _max?: SimulationMaxAggregateInputType
  }

  export type SimulationGroupByOutputType = {
    id: string
    name: string
    version: number
    isMain: boolean
    isSituationNow: boolean
    startDate: Date
    realRate: number
    lifeStatus: $Enums.LifeStatus
    parentId: string | null
    createdAt: Date
    updatedAt: Date
    _count: SimulationCountAggregateOutputType | null
    _avg: SimulationAvgAggregateOutputType | null
    _sum: SimulationSumAggregateOutputType | null
    _min: SimulationMinAggregateOutputType | null
    _max: SimulationMaxAggregateOutputType | null
  }

  type GetSimulationGroupByPayload<T extends SimulationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SimulationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SimulationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SimulationGroupByOutputType[P]>
            : GetScalarType<T[P], SimulationGroupByOutputType[P]>
        }
      >
    >


  export type SimulationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    version?: boolean
    isMain?: boolean
    isSituationNow?: boolean
    startDate?: boolean
    realRate?: boolean
    lifeStatus?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Simulation$parentArgs<ExtArgs>
    children?: boolean | Simulation$childrenArgs<ExtArgs>
    allocations?: boolean | Simulation$allocationsArgs<ExtArgs>
    movements?: boolean | Simulation$movementsArgs<ExtArgs>
    insurances?: boolean | Simulation$insurancesArgs<ExtArgs>
    _count?: boolean | SimulationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["simulation"]>

  export type SimulationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    version?: boolean
    isMain?: boolean
    isSituationNow?: boolean
    startDate?: boolean
    realRate?: boolean
    lifeStatus?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Simulation$parentArgs<ExtArgs>
  }, ExtArgs["result"]["simulation"]>

  export type SimulationSelectScalar = {
    id?: boolean
    name?: boolean
    version?: boolean
    isMain?: boolean
    isSituationNow?: boolean
    startDate?: boolean
    realRate?: boolean
    lifeStatus?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SimulationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Simulation$parentArgs<ExtArgs>
    children?: boolean | Simulation$childrenArgs<ExtArgs>
    allocations?: boolean | Simulation$allocationsArgs<ExtArgs>
    movements?: boolean | Simulation$movementsArgs<ExtArgs>
    insurances?: boolean | Simulation$insurancesArgs<ExtArgs>
    _count?: boolean | SimulationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SimulationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Simulation$parentArgs<ExtArgs>
  }

  export type $SimulationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Simulation"
    objects: {
      parent: Prisma.$SimulationPayload<ExtArgs> | null
      children: Prisma.$SimulationPayload<ExtArgs>[]
      allocations: Prisma.$AllocationPayload<ExtArgs>[]
      movements: Prisma.$MovementPayload<ExtArgs>[]
      insurances: Prisma.$InsurancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      version: number
      isMain: boolean
      isSituationNow: boolean
      startDate: Date
      realRate: number
      lifeStatus: $Enums.LifeStatus
      parentId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["simulation"]>
    composites: {}
  }

  type SimulationGetPayload<S extends boolean | null | undefined | SimulationDefaultArgs> = $Result.GetResult<Prisma.$SimulationPayload, S>

  type SimulationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SimulationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SimulationCountAggregateInputType | true
    }

  export interface SimulationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Simulation'], meta: { name: 'Simulation' } }
    /**
     * Find zero or one Simulation that matches the filter.
     * @param {SimulationFindUniqueArgs} args - Arguments to find a Simulation
     * @example
     * // Get one Simulation
     * const simulation = await prisma.simulation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SimulationFindUniqueArgs>(args: SelectSubset<T, SimulationFindUniqueArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Simulation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SimulationFindUniqueOrThrowArgs} args - Arguments to find a Simulation
     * @example
     * // Get one Simulation
     * const simulation = await prisma.simulation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SimulationFindUniqueOrThrowArgs>(args: SelectSubset<T, SimulationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Simulation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimulationFindFirstArgs} args - Arguments to find a Simulation
     * @example
     * // Get one Simulation
     * const simulation = await prisma.simulation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SimulationFindFirstArgs>(args?: SelectSubset<T, SimulationFindFirstArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Simulation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimulationFindFirstOrThrowArgs} args - Arguments to find a Simulation
     * @example
     * // Get one Simulation
     * const simulation = await prisma.simulation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SimulationFindFirstOrThrowArgs>(args?: SelectSubset<T, SimulationFindFirstOrThrowArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Simulations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimulationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Simulations
     * const simulations = await prisma.simulation.findMany()
     * 
     * // Get first 10 Simulations
     * const simulations = await prisma.simulation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const simulationWithIdOnly = await prisma.simulation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SimulationFindManyArgs>(args?: SelectSubset<T, SimulationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Simulation.
     * @param {SimulationCreateArgs} args - Arguments to create a Simulation.
     * @example
     * // Create one Simulation
     * const Simulation = await prisma.simulation.create({
     *   data: {
     *     // ... data to create a Simulation
     *   }
     * })
     * 
     */
    create<T extends SimulationCreateArgs>(args: SelectSubset<T, SimulationCreateArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Simulations.
     * @param {SimulationCreateManyArgs} args - Arguments to create many Simulations.
     * @example
     * // Create many Simulations
     * const simulation = await prisma.simulation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SimulationCreateManyArgs>(args?: SelectSubset<T, SimulationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Simulations and returns the data saved in the database.
     * @param {SimulationCreateManyAndReturnArgs} args - Arguments to create many Simulations.
     * @example
     * // Create many Simulations
     * const simulation = await prisma.simulation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Simulations and only return the `id`
     * const simulationWithIdOnly = await prisma.simulation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SimulationCreateManyAndReturnArgs>(args?: SelectSubset<T, SimulationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Simulation.
     * @param {SimulationDeleteArgs} args - Arguments to delete one Simulation.
     * @example
     * // Delete one Simulation
     * const Simulation = await prisma.simulation.delete({
     *   where: {
     *     // ... filter to delete one Simulation
     *   }
     * })
     * 
     */
    delete<T extends SimulationDeleteArgs>(args: SelectSubset<T, SimulationDeleteArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Simulation.
     * @param {SimulationUpdateArgs} args - Arguments to update one Simulation.
     * @example
     * // Update one Simulation
     * const simulation = await prisma.simulation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SimulationUpdateArgs>(args: SelectSubset<T, SimulationUpdateArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Simulations.
     * @param {SimulationDeleteManyArgs} args - Arguments to filter Simulations to delete.
     * @example
     * // Delete a few Simulations
     * const { count } = await prisma.simulation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SimulationDeleteManyArgs>(args?: SelectSubset<T, SimulationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Simulations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimulationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Simulations
     * const simulation = await prisma.simulation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SimulationUpdateManyArgs>(args: SelectSubset<T, SimulationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Simulation.
     * @param {SimulationUpsertArgs} args - Arguments to update or create a Simulation.
     * @example
     * // Update or create a Simulation
     * const simulation = await prisma.simulation.upsert({
     *   create: {
     *     // ... data to create a Simulation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Simulation we want to update
     *   }
     * })
     */
    upsert<T extends SimulationUpsertArgs>(args: SelectSubset<T, SimulationUpsertArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Simulations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimulationCountArgs} args - Arguments to filter Simulations to count.
     * @example
     * // Count the number of Simulations
     * const count = await prisma.simulation.count({
     *   where: {
     *     // ... the filter for the Simulations we want to count
     *   }
     * })
    **/
    count<T extends SimulationCountArgs>(
      args?: Subset<T, SimulationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SimulationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Simulation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimulationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SimulationAggregateArgs>(args: Subset<T, SimulationAggregateArgs>): Prisma.PrismaPromise<GetSimulationAggregateType<T>>

    /**
     * Group by Simulation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimulationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SimulationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SimulationGroupByArgs['orderBy'] }
        : { orderBy?: SimulationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SimulationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSimulationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Simulation model
   */
  readonly fields: SimulationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Simulation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SimulationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Simulation$parentArgs<ExtArgs> = {}>(args?: Subset<T, Simulation$parentArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends Simulation$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Simulation$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findMany"> | Null>
    allocations<T extends Simulation$allocationsArgs<ExtArgs> = {}>(args?: Subset<T, Simulation$allocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findMany"> | Null>
    movements<T extends Simulation$movementsArgs<ExtArgs> = {}>(args?: Subset<T, Simulation$movementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findMany"> | Null>
    insurances<T extends Simulation$insurancesArgs<ExtArgs> = {}>(args?: Subset<T, Simulation$insurancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Simulation model
   */ 
  interface SimulationFieldRefs {
    readonly id: FieldRef<"Simulation", 'String'>
    readonly name: FieldRef<"Simulation", 'String'>
    readonly version: FieldRef<"Simulation", 'Int'>
    readonly isMain: FieldRef<"Simulation", 'Boolean'>
    readonly isSituationNow: FieldRef<"Simulation", 'Boolean'>
    readonly startDate: FieldRef<"Simulation", 'DateTime'>
    readonly realRate: FieldRef<"Simulation", 'Float'>
    readonly lifeStatus: FieldRef<"Simulation", 'LifeStatus'>
    readonly parentId: FieldRef<"Simulation", 'String'>
    readonly createdAt: FieldRef<"Simulation", 'DateTime'>
    readonly updatedAt: FieldRef<"Simulation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Simulation findUnique
   */
  export type SimulationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    /**
     * Filter, which Simulation to fetch.
     */
    where: SimulationWhereUniqueInput
  }

  /**
   * Simulation findUniqueOrThrow
   */
  export type SimulationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    /**
     * Filter, which Simulation to fetch.
     */
    where: SimulationWhereUniqueInput
  }

  /**
   * Simulation findFirst
   */
  export type SimulationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    /**
     * Filter, which Simulation to fetch.
     */
    where?: SimulationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simulations to fetch.
     */
    orderBy?: SimulationOrderByWithRelationInput | SimulationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Simulations.
     */
    cursor?: SimulationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simulations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simulations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Simulations.
     */
    distinct?: SimulationScalarFieldEnum | SimulationScalarFieldEnum[]
  }

  /**
   * Simulation findFirstOrThrow
   */
  export type SimulationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    /**
     * Filter, which Simulation to fetch.
     */
    where?: SimulationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simulations to fetch.
     */
    orderBy?: SimulationOrderByWithRelationInput | SimulationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Simulations.
     */
    cursor?: SimulationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simulations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simulations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Simulations.
     */
    distinct?: SimulationScalarFieldEnum | SimulationScalarFieldEnum[]
  }

  /**
   * Simulation findMany
   */
  export type SimulationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    /**
     * Filter, which Simulations to fetch.
     */
    where?: SimulationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simulations to fetch.
     */
    orderBy?: SimulationOrderByWithRelationInput | SimulationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Simulations.
     */
    cursor?: SimulationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simulations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simulations.
     */
    skip?: number
    distinct?: SimulationScalarFieldEnum | SimulationScalarFieldEnum[]
  }

  /**
   * Simulation create
   */
  export type SimulationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    /**
     * The data needed to create a Simulation.
     */
    data: XOR<SimulationCreateInput, SimulationUncheckedCreateInput>
  }

  /**
   * Simulation createMany
   */
  export type SimulationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Simulations.
     */
    data: SimulationCreateManyInput | SimulationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Simulation createManyAndReturn
   */
  export type SimulationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Simulations.
     */
    data: SimulationCreateManyInput | SimulationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Simulation update
   */
  export type SimulationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    /**
     * The data needed to update a Simulation.
     */
    data: XOR<SimulationUpdateInput, SimulationUncheckedUpdateInput>
    /**
     * Choose, which Simulation to update.
     */
    where: SimulationWhereUniqueInput
  }

  /**
   * Simulation updateMany
   */
  export type SimulationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Simulations.
     */
    data: XOR<SimulationUpdateManyMutationInput, SimulationUncheckedUpdateManyInput>
    /**
     * Filter which Simulations to update
     */
    where?: SimulationWhereInput
  }

  /**
   * Simulation upsert
   */
  export type SimulationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    /**
     * The filter to search for the Simulation to update in case it exists.
     */
    where: SimulationWhereUniqueInput
    /**
     * In case the Simulation found by the `where` argument doesn't exist, create a new Simulation with this data.
     */
    create: XOR<SimulationCreateInput, SimulationUncheckedCreateInput>
    /**
     * In case the Simulation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SimulationUpdateInput, SimulationUncheckedUpdateInput>
  }

  /**
   * Simulation delete
   */
  export type SimulationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    /**
     * Filter which Simulation to delete.
     */
    where: SimulationWhereUniqueInput
  }

  /**
   * Simulation deleteMany
   */
  export type SimulationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Simulations to delete
     */
    where?: SimulationWhereInput
  }

  /**
   * Simulation.parent
   */
  export type Simulation$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    where?: SimulationWhereInput
  }

  /**
   * Simulation.children
   */
  export type Simulation$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
    where?: SimulationWhereInput
    orderBy?: SimulationOrderByWithRelationInput | SimulationOrderByWithRelationInput[]
    cursor?: SimulationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SimulationScalarFieldEnum | SimulationScalarFieldEnum[]
  }

  /**
   * Simulation.allocations
   */
  export type Simulation$allocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    where?: AllocationWhereInput
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    cursor?: AllocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * Simulation.movements
   */
  export type Simulation$movementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    where?: MovementWhereInput
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    cursor?: MovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * Simulation.insurances
   */
  export type Simulation$insurancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    where?: InsuranceWhereInput
    orderBy?: InsuranceOrderByWithRelationInput | InsuranceOrderByWithRelationInput[]
    cursor?: InsuranceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsuranceScalarFieldEnum | InsuranceScalarFieldEnum[]
  }

  /**
   * Simulation without action
   */
  export type SimulationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simulation
     */
    select?: SimulationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimulationInclude<ExtArgs> | null
  }


  /**
   * Model Allocation
   */

  export type AggregateAllocation = {
    _count: AllocationCountAggregateOutputType | null
    _min: AllocationMinAggregateOutputType | null
    _max: AllocationMaxAggregateOutputType | null
  }

  export type AllocationMinAggregateOutputType = {
    id: string | null
    simulationId: string | null
    type: $Enums.AllocationType | null
    name: string | null
    createdAt: Date | null
  }

  export type AllocationMaxAggregateOutputType = {
    id: string | null
    simulationId: string | null
    type: $Enums.AllocationType | null
    name: string | null
    createdAt: Date | null
  }

  export type AllocationCountAggregateOutputType = {
    id: number
    simulationId: number
    type: number
    name: number
    createdAt: number
    _all: number
  }


  export type AllocationMinAggregateInputType = {
    id?: true
    simulationId?: true
    type?: true
    name?: true
    createdAt?: true
  }

  export type AllocationMaxAggregateInputType = {
    id?: true
    simulationId?: true
    type?: true
    name?: true
    createdAt?: true
  }

  export type AllocationCountAggregateInputType = {
    id?: true
    simulationId?: true
    type?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type AllocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allocation to aggregate.
     */
    where?: AllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allocations to fetch.
     */
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Allocations
    **/
    _count?: true | AllocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllocationMaxAggregateInputType
  }

  export type GetAllocationAggregateType<T extends AllocationAggregateArgs> = {
        [P in keyof T & keyof AggregateAllocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllocation[P]>
      : GetScalarType<T[P], AggregateAllocation[P]>
  }




  export type AllocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocationWhereInput
    orderBy?: AllocationOrderByWithAggregationInput | AllocationOrderByWithAggregationInput[]
    by: AllocationScalarFieldEnum[] | AllocationScalarFieldEnum
    having?: AllocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllocationCountAggregateInputType | true
    _min?: AllocationMinAggregateInputType
    _max?: AllocationMaxAggregateInputType
  }

  export type AllocationGroupByOutputType = {
    id: string
    simulationId: string
    type: $Enums.AllocationType
    name: string
    createdAt: Date
    _count: AllocationCountAggregateOutputType | null
    _min: AllocationMinAggregateOutputType | null
    _max: AllocationMaxAggregateOutputType | null
  }

  type GetAllocationGroupByPayload<T extends AllocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllocationGroupByOutputType[P]>
            : GetScalarType<T[P], AllocationGroupByOutputType[P]>
        }
      >
    >


  export type AllocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    simulationId?: boolean
    type?: boolean
    name?: boolean
    createdAt?: boolean
    records?: boolean | Allocation$recordsArgs<ExtArgs>
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
    _count?: boolean | AllocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allocation"]>

  export type AllocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    simulationId?: boolean
    type?: boolean
    name?: boolean
    createdAt?: boolean
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allocation"]>

  export type AllocationSelectScalar = {
    id?: boolean
    simulationId?: boolean
    type?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type AllocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    records?: boolean | Allocation$recordsArgs<ExtArgs>
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
    _count?: boolean | AllocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AllocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }

  export type $AllocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Allocation"
    objects: {
      records: Prisma.$AllocationRecordPayload<ExtArgs>[]
      simulation: Prisma.$SimulationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      simulationId: string
      type: $Enums.AllocationType
      name: string
      createdAt: Date
    }, ExtArgs["result"]["allocation"]>
    composites: {}
  }

  type AllocationGetPayload<S extends boolean | null | undefined | AllocationDefaultArgs> = $Result.GetResult<Prisma.$AllocationPayload, S>

  type AllocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AllocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AllocationCountAggregateInputType | true
    }

  export interface AllocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Allocation'], meta: { name: 'Allocation' } }
    /**
     * Find zero or one Allocation that matches the filter.
     * @param {AllocationFindUniqueArgs} args - Arguments to find a Allocation
     * @example
     * // Get one Allocation
     * const allocation = await prisma.allocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AllocationFindUniqueArgs>(args: SelectSubset<T, AllocationFindUniqueArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Allocation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AllocationFindUniqueOrThrowArgs} args - Arguments to find a Allocation
     * @example
     * // Get one Allocation
     * const allocation = await prisma.allocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AllocationFindUniqueOrThrowArgs>(args: SelectSubset<T, AllocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Allocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationFindFirstArgs} args - Arguments to find a Allocation
     * @example
     * // Get one Allocation
     * const allocation = await prisma.allocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AllocationFindFirstArgs>(args?: SelectSubset<T, AllocationFindFirstArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Allocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationFindFirstOrThrowArgs} args - Arguments to find a Allocation
     * @example
     * // Get one Allocation
     * const allocation = await prisma.allocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AllocationFindFirstOrThrowArgs>(args?: SelectSubset<T, AllocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Allocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allocations
     * const allocations = await prisma.allocation.findMany()
     * 
     * // Get first 10 Allocations
     * const allocations = await prisma.allocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allocationWithIdOnly = await prisma.allocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AllocationFindManyArgs>(args?: SelectSubset<T, AllocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Allocation.
     * @param {AllocationCreateArgs} args - Arguments to create a Allocation.
     * @example
     * // Create one Allocation
     * const Allocation = await prisma.allocation.create({
     *   data: {
     *     // ... data to create a Allocation
     *   }
     * })
     * 
     */
    create<T extends AllocationCreateArgs>(args: SelectSubset<T, AllocationCreateArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Allocations.
     * @param {AllocationCreateManyArgs} args - Arguments to create many Allocations.
     * @example
     * // Create many Allocations
     * const allocation = await prisma.allocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AllocationCreateManyArgs>(args?: SelectSubset<T, AllocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Allocations and returns the data saved in the database.
     * @param {AllocationCreateManyAndReturnArgs} args - Arguments to create many Allocations.
     * @example
     * // Create many Allocations
     * const allocation = await prisma.allocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Allocations and only return the `id`
     * const allocationWithIdOnly = await prisma.allocation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AllocationCreateManyAndReturnArgs>(args?: SelectSubset<T, AllocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Allocation.
     * @param {AllocationDeleteArgs} args - Arguments to delete one Allocation.
     * @example
     * // Delete one Allocation
     * const Allocation = await prisma.allocation.delete({
     *   where: {
     *     // ... filter to delete one Allocation
     *   }
     * })
     * 
     */
    delete<T extends AllocationDeleteArgs>(args: SelectSubset<T, AllocationDeleteArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Allocation.
     * @param {AllocationUpdateArgs} args - Arguments to update one Allocation.
     * @example
     * // Update one Allocation
     * const allocation = await prisma.allocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AllocationUpdateArgs>(args: SelectSubset<T, AllocationUpdateArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Allocations.
     * @param {AllocationDeleteManyArgs} args - Arguments to filter Allocations to delete.
     * @example
     * // Delete a few Allocations
     * const { count } = await prisma.allocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AllocationDeleteManyArgs>(args?: SelectSubset<T, AllocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allocations
     * const allocation = await prisma.allocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AllocationUpdateManyArgs>(args: SelectSubset<T, AllocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Allocation.
     * @param {AllocationUpsertArgs} args - Arguments to update or create a Allocation.
     * @example
     * // Update or create a Allocation
     * const allocation = await prisma.allocation.upsert({
     *   create: {
     *     // ... data to create a Allocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allocation we want to update
     *   }
     * })
     */
    upsert<T extends AllocationUpsertArgs>(args: SelectSubset<T, AllocationUpsertArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Allocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationCountArgs} args - Arguments to filter Allocations to count.
     * @example
     * // Count the number of Allocations
     * const count = await prisma.allocation.count({
     *   where: {
     *     // ... the filter for the Allocations we want to count
     *   }
     * })
    **/
    count<T extends AllocationCountArgs>(
      args?: Subset<T, AllocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllocationAggregateArgs>(args: Subset<T, AllocationAggregateArgs>): Prisma.PrismaPromise<GetAllocationAggregateType<T>>

    /**
     * Group by Allocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllocationGroupByArgs['orderBy'] }
        : { orderBy?: AllocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Allocation model
   */
  readonly fields: AllocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Allocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    records<T extends Allocation$recordsArgs<ExtArgs> = {}>(args?: Subset<T, Allocation$recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "findMany"> | Null>
    simulation<T extends SimulationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SimulationDefaultArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Allocation model
   */ 
  interface AllocationFieldRefs {
    readonly id: FieldRef<"Allocation", 'String'>
    readonly simulationId: FieldRef<"Allocation", 'String'>
    readonly type: FieldRef<"Allocation", 'AllocationType'>
    readonly name: FieldRef<"Allocation", 'String'>
    readonly createdAt: FieldRef<"Allocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Allocation findUnique
   */
  export type AllocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocation to fetch.
     */
    where: AllocationWhereUniqueInput
  }

  /**
   * Allocation findUniqueOrThrow
   */
  export type AllocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocation to fetch.
     */
    where: AllocationWhereUniqueInput
  }

  /**
   * Allocation findFirst
   */
  export type AllocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocation to fetch.
     */
    where?: AllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allocations to fetch.
     */
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allocations.
     */
    cursor?: AllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allocations.
     */
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * Allocation findFirstOrThrow
   */
  export type AllocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocation to fetch.
     */
    where?: AllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allocations to fetch.
     */
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allocations.
     */
    cursor?: AllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allocations.
     */
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * Allocation findMany
   */
  export type AllocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocations to fetch.
     */
    where?: AllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allocations to fetch.
     */
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Allocations.
     */
    cursor?: AllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allocations.
     */
    skip?: number
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * Allocation create
   */
  export type AllocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Allocation.
     */
    data: XOR<AllocationCreateInput, AllocationUncheckedCreateInput>
  }

  /**
   * Allocation createMany
   */
  export type AllocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Allocations.
     */
    data: AllocationCreateManyInput | AllocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Allocation createManyAndReturn
   */
  export type AllocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Allocations.
     */
    data: AllocationCreateManyInput | AllocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Allocation update
   */
  export type AllocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Allocation.
     */
    data: XOR<AllocationUpdateInput, AllocationUncheckedUpdateInput>
    /**
     * Choose, which Allocation to update.
     */
    where: AllocationWhereUniqueInput
  }

  /**
   * Allocation updateMany
   */
  export type AllocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Allocations.
     */
    data: XOR<AllocationUpdateManyMutationInput, AllocationUncheckedUpdateManyInput>
    /**
     * Filter which Allocations to update
     */
    where?: AllocationWhereInput
  }

  /**
   * Allocation upsert
   */
  export type AllocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Allocation to update in case it exists.
     */
    where: AllocationWhereUniqueInput
    /**
     * In case the Allocation found by the `where` argument doesn't exist, create a new Allocation with this data.
     */
    create: XOR<AllocationCreateInput, AllocationUncheckedCreateInput>
    /**
     * In case the Allocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllocationUpdateInput, AllocationUncheckedUpdateInput>
  }

  /**
   * Allocation delete
   */
  export type AllocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter which Allocation to delete.
     */
    where: AllocationWhereUniqueInput
  }

  /**
   * Allocation deleteMany
   */
  export type AllocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allocations to delete
     */
    where?: AllocationWhereInput
  }

  /**
   * Allocation.records
   */
  export type Allocation$recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    where?: AllocationRecordWhereInput
    orderBy?: AllocationRecordOrderByWithRelationInput | AllocationRecordOrderByWithRelationInput[]
    cursor?: AllocationRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllocationRecordScalarFieldEnum | AllocationRecordScalarFieldEnum[]
  }

  /**
   * Allocation without action
   */
  export type AllocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
  }


  /**
   * Model AllocationRecord
   */

  export type AggregateAllocationRecord = {
    _count: AllocationRecordCountAggregateOutputType | null
    _avg: AllocationRecordAvgAggregateOutputType | null
    _sum: AllocationRecordSumAggregateOutputType | null
    _min: AllocationRecordMinAggregateOutputType | null
    _max: AllocationRecordMaxAggregateOutputType | null
  }

  export type AllocationRecordAvgAggregateOutputType = {
    value: Decimal | null
    loanInstallments: number | null
    loanRate: number | null
    downPayment: Decimal | null
  }

  export type AllocationRecordSumAggregateOutputType = {
    value: Decimal | null
    loanInstallments: number | null
    loanRate: number | null
    downPayment: Decimal | null
  }

  export type AllocationRecordMinAggregateOutputType = {
    id: string | null
    allocationId: string | null
    date: Date | null
    value: Decimal | null
    hasLoan: boolean | null
    loanStart: Date | null
    loanInstallments: number | null
    loanRate: number | null
    downPayment: Decimal | null
  }

  export type AllocationRecordMaxAggregateOutputType = {
    id: string | null
    allocationId: string | null
    date: Date | null
    value: Decimal | null
    hasLoan: boolean | null
    loanStart: Date | null
    loanInstallments: number | null
    loanRate: number | null
    downPayment: Decimal | null
  }

  export type AllocationRecordCountAggregateOutputType = {
    id: number
    allocationId: number
    date: number
    value: number
    hasLoan: number
    loanStart: number
    loanInstallments: number
    loanRate: number
    downPayment: number
    _all: number
  }


  export type AllocationRecordAvgAggregateInputType = {
    value?: true
    loanInstallments?: true
    loanRate?: true
    downPayment?: true
  }

  export type AllocationRecordSumAggregateInputType = {
    value?: true
    loanInstallments?: true
    loanRate?: true
    downPayment?: true
  }

  export type AllocationRecordMinAggregateInputType = {
    id?: true
    allocationId?: true
    date?: true
    value?: true
    hasLoan?: true
    loanStart?: true
    loanInstallments?: true
    loanRate?: true
    downPayment?: true
  }

  export type AllocationRecordMaxAggregateInputType = {
    id?: true
    allocationId?: true
    date?: true
    value?: true
    hasLoan?: true
    loanStart?: true
    loanInstallments?: true
    loanRate?: true
    downPayment?: true
  }

  export type AllocationRecordCountAggregateInputType = {
    id?: true
    allocationId?: true
    date?: true
    value?: true
    hasLoan?: true
    loanStart?: true
    loanInstallments?: true
    loanRate?: true
    downPayment?: true
    _all?: true
  }

  export type AllocationRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AllocationRecord to aggregate.
     */
    where?: AllocationRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllocationRecords to fetch.
     */
    orderBy?: AllocationRecordOrderByWithRelationInput | AllocationRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllocationRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllocationRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllocationRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AllocationRecords
    **/
    _count?: true | AllocationRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllocationRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllocationRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllocationRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllocationRecordMaxAggregateInputType
  }

  export type GetAllocationRecordAggregateType<T extends AllocationRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateAllocationRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllocationRecord[P]>
      : GetScalarType<T[P], AggregateAllocationRecord[P]>
  }




  export type AllocationRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocationRecordWhereInput
    orderBy?: AllocationRecordOrderByWithAggregationInput | AllocationRecordOrderByWithAggregationInput[]
    by: AllocationRecordScalarFieldEnum[] | AllocationRecordScalarFieldEnum
    having?: AllocationRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllocationRecordCountAggregateInputType | true
    _avg?: AllocationRecordAvgAggregateInputType
    _sum?: AllocationRecordSumAggregateInputType
    _min?: AllocationRecordMinAggregateInputType
    _max?: AllocationRecordMaxAggregateInputType
  }

  export type AllocationRecordGroupByOutputType = {
    id: string
    allocationId: string
    date: Date
    value: Decimal
    hasLoan: boolean
    loanStart: Date | null
    loanInstallments: number | null
    loanRate: number | null
    downPayment: Decimal | null
    _count: AllocationRecordCountAggregateOutputType | null
    _avg: AllocationRecordAvgAggregateOutputType | null
    _sum: AllocationRecordSumAggregateOutputType | null
    _min: AllocationRecordMinAggregateOutputType | null
    _max: AllocationRecordMaxAggregateOutputType | null
  }

  type GetAllocationRecordGroupByPayload<T extends AllocationRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllocationRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllocationRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllocationRecordGroupByOutputType[P]>
            : GetScalarType<T[P], AllocationRecordGroupByOutputType[P]>
        }
      >
    >


  export type AllocationRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    allocationId?: boolean
    date?: boolean
    value?: boolean
    hasLoan?: boolean
    loanStart?: boolean
    loanInstallments?: boolean
    loanRate?: boolean
    downPayment?: boolean
    allocation?: boolean | AllocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allocationRecord"]>

  export type AllocationRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    allocationId?: boolean
    date?: boolean
    value?: boolean
    hasLoan?: boolean
    loanStart?: boolean
    loanInstallments?: boolean
    loanRate?: boolean
    downPayment?: boolean
    allocation?: boolean | AllocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allocationRecord"]>

  export type AllocationRecordSelectScalar = {
    id?: boolean
    allocationId?: boolean
    date?: boolean
    value?: boolean
    hasLoan?: boolean
    loanStart?: boolean
    loanInstallments?: boolean
    loanRate?: boolean
    downPayment?: boolean
  }

  export type AllocationRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allocation?: boolean | AllocationDefaultArgs<ExtArgs>
  }
  export type AllocationRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allocation?: boolean | AllocationDefaultArgs<ExtArgs>
  }

  export type $AllocationRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AllocationRecord"
    objects: {
      allocation: Prisma.$AllocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      allocationId: string
      date: Date
      value: Prisma.Decimal
      hasLoan: boolean
      loanStart: Date | null
      loanInstallments: number | null
      loanRate: number | null
      downPayment: Prisma.Decimal | null
    }, ExtArgs["result"]["allocationRecord"]>
    composites: {}
  }

  type AllocationRecordGetPayload<S extends boolean | null | undefined | AllocationRecordDefaultArgs> = $Result.GetResult<Prisma.$AllocationRecordPayload, S>

  type AllocationRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AllocationRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AllocationRecordCountAggregateInputType | true
    }

  export interface AllocationRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AllocationRecord'], meta: { name: 'AllocationRecord' } }
    /**
     * Find zero or one AllocationRecord that matches the filter.
     * @param {AllocationRecordFindUniqueArgs} args - Arguments to find a AllocationRecord
     * @example
     * // Get one AllocationRecord
     * const allocationRecord = await prisma.allocationRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AllocationRecordFindUniqueArgs>(args: SelectSubset<T, AllocationRecordFindUniqueArgs<ExtArgs>>): Prisma__AllocationRecordClient<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AllocationRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AllocationRecordFindUniqueOrThrowArgs} args - Arguments to find a AllocationRecord
     * @example
     * // Get one AllocationRecord
     * const allocationRecord = await prisma.allocationRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AllocationRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, AllocationRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllocationRecordClient<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AllocationRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationRecordFindFirstArgs} args - Arguments to find a AllocationRecord
     * @example
     * // Get one AllocationRecord
     * const allocationRecord = await prisma.allocationRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AllocationRecordFindFirstArgs>(args?: SelectSubset<T, AllocationRecordFindFirstArgs<ExtArgs>>): Prisma__AllocationRecordClient<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AllocationRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationRecordFindFirstOrThrowArgs} args - Arguments to find a AllocationRecord
     * @example
     * // Get one AllocationRecord
     * const allocationRecord = await prisma.allocationRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AllocationRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, AllocationRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllocationRecordClient<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AllocationRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AllocationRecords
     * const allocationRecords = await prisma.allocationRecord.findMany()
     * 
     * // Get first 10 AllocationRecords
     * const allocationRecords = await prisma.allocationRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allocationRecordWithIdOnly = await prisma.allocationRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AllocationRecordFindManyArgs>(args?: SelectSubset<T, AllocationRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AllocationRecord.
     * @param {AllocationRecordCreateArgs} args - Arguments to create a AllocationRecord.
     * @example
     * // Create one AllocationRecord
     * const AllocationRecord = await prisma.allocationRecord.create({
     *   data: {
     *     // ... data to create a AllocationRecord
     *   }
     * })
     * 
     */
    create<T extends AllocationRecordCreateArgs>(args: SelectSubset<T, AllocationRecordCreateArgs<ExtArgs>>): Prisma__AllocationRecordClient<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AllocationRecords.
     * @param {AllocationRecordCreateManyArgs} args - Arguments to create many AllocationRecords.
     * @example
     * // Create many AllocationRecords
     * const allocationRecord = await prisma.allocationRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AllocationRecordCreateManyArgs>(args?: SelectSubset<T, AllocationRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AllocationRecords and returns the data saved in the database.
     * @param {AllocationRecordCreateManyAndReturnArgs} args - Arguments to create many AllocationRecords.
     * @example
     * // Create many AllocationRecords
     * const allocationRecord = await prisma.allocationRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AllocationRecords and only return the `id`
     * const allocationRecordWithIdOnly = await prisma.allocationRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AllocationRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, AllocationRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AllocationRecord.
     * @param {AllocationRecordDeleteArgs} args - Arguments to delete one AllocationRecord.
     * @example
     * // Delete one AllocationRecord
     * const AllocationRecord = await prisma.allocationRecord.delete({
     *   where: {
     *     // ... filter to delete one AllocationRecord
     *   }
     * })
     * 
     */
    delete<T extends AllocationRecordDeleteArgs>(args: SelectSubset<T, AllocationRecordDeleteArgs<ExtArgs>>): Prisma__AllocationRecordClient<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AllocationRecord.
     * @param {AllocationRecordUpdateArgs} args - Arguments to update one AllocationRecord.
     * @example
     * // Update one AllocationRecord
     * const allocationRecord = await prisma.allocationRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AllocationRecordUpdateArgs>(args: SelectSubset<T, AllocationRecordUpdateArgs<ExtArgs>>): Prisma__AllocationRecordClient<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AllocationRecords.
     * @param {AllocationRecordDeleteManyArgs} args - Arguments to filter AllocationRecords to delete.
     * @example
     * // Delete a few AllocationRecords
     * const { count } = await prisma.allocationRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AllocationRecordDeleteManyArgs>(args?: SelectSubset<T, AllocationRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AllocationRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AllocationRecords
     * const allocationRecord = await prisma.allocationRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AllocationRecordUpdateManyArgs>(args: SelectSubset<T, AllocationRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AllocationRecord.
     * @param {AllocationRecordUpsertArgs} args - Arguments to update or create a AllocationRecord.
     * @example
     * // Update or create a AllocationRecord
     * const allocationRecord = await prisma.allocationRecord.upsert({
     *   create: {
     *     // ... data to create a AllocationRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AllocationRecord we want to update
     *   }
     * })
     */
    upsert<T extends AllocationRecordUpsertArgs>(args: SelectSubset<T, AllocationRecordUpsertArgs<ExtArgs>>): Prisma__AllocationRecordClient<$Result.GetResult<Prisma.$AllocationRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AllocationRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationRecordCountArgs} args - Arguments to filter AllocationRecords to count.
     * @example
     * // Count the number of AllocationRecords
     * const count = await prisma.allocationRecord.count({
     *   where: {
     *     // ... the filter for the AllocationRecords we want to count
     *   }
     * })
    **/
    count<T extends AllocationRecordCountArgs>(
      args?: Subset<T, AllocationRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllocationRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AllocationRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllocationRecordAggregateArgs>(args: Subset<T, AllocationRecordAggregateArgs>): Prisma.PrismaPromise<GetAllocationRecordAggregateType<T>>

    /**
     * Group by AllocationRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllocationRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllocationRecordGroupByArgs['orderBy'] }
        : { orderBy?: AllocationRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllocationRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllocationRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AllocationRecord model
   */
  readonly fields: AllocationRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AllocationRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllocationRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    allocation<T extends AllocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AllocationDefaultArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AllocationRecord model
   */ 
  interface AllocationRecordFieldRefs {
    readonly id: FieldRef<"AllocationRecord", 'String'>
    readonly allocationId: FieldRef<"AllocationRecord", 'String'>
    readonly date: FieldRef<"AllocationRecord", 'DateTime'>
    readonly value: FieldRef<"AllocationRecord", 'Decimal'>
    readonly hasLoan: FieldRef<"AllocationRecord", 'Boolean'>
    readonly loanStart: FieldRef<"AllocationRecord", 'DateTime'>
    readonly loanInstallments: FieldRef<"AllocationRecord", 'Int'>
    readonly loanRate: FieldRef<"AllocationRecord", 'Float'>
    readonly downPayment: FieldRef<"AllocationRecord", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * AllocationRecord findUnique
   */
  export type AllocationRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    /**
     * Filter, which AllocationRecord to fetch.
     */
    where: AllocationRecordWhereUniqueInput
  }

  /**
   * AllocationRecord findUniqueOrThrow
   */
  export type AllocationRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    /**
     * Filter, which AllocationRecord to fetch.
     */
    where: AllocationRecordWhereUniqueInput
  }

  /**
   * AllocationRecord findFirst
   */
  export type AllocationRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    /**
     * Filter, which AllocationRecord to fetch.
     */
    where?: AllocationRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllocationRecords to fetch.
     */
    orderBy?: AllocationRecordOrderByWithRelationInput | AllocationRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AllocationRecords.
     */
    cursor?: AllocationRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllocationRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllocationRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AllocationRecords.
     */
    distinct?: AllocationRecordScalarFieldEnum | AllocationRecordScalarFieldEnum[]
  }

  /**
   * AllocationRecord findFirstOrThrow
   */
  export type AllocationRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    /**
     * Filter, which AllocationRecord to fetch.
     */
    where?: AllocationRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllocationRecords to fetch.
     */
    orderBy?: AllocationRecordOrderByWithRelationInput | AllocationRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AllocationRecords.
     */
    cursor?: AllocationRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllocationRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllocationRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AllocationRecords.
     */
    distinct?: AllocationRecordScalarFieldEnum | AllocationRecordScalarFieldEnum[]
  }

  /**
   * AllocationRecord findMany
   */
  export type AllocationRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    /**
     * Filter, which AllocationRecords to fetch.
     */
    where?: AllocationRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllocationRecords to fetch.
     */
    orderBy?: AllocationRecordOrderByWithRelationInput | AllocationRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AllocationRecords.
     */
    cursor?: AllocationRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllocationRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllocationRecords.
     */
    skip?: number
    distinct?: AllocationRecordScalarFieldEnum | AllocationRecordScalarFieldEnum[]
  }

  /**
   * AllocationRecord create
   */
  export type AllocationRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a AllocationRecord.
     */
    data: XOR<AllocationRecordCreateInput, AllocationRecordUncheckedCreateInput>
  }

  /**
   * AllocationRecord createMany
   */
  export type AllocationRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AllocationRecords.
     */
    data: AllocationRecordCreateManyInput | AllocationRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AllocationRecord createManyAndReturn
   */
  export type AllocationRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AllocationRecords.
     */
    data: AllocationRecordCreateManyInput | AllocationRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AllocationRecord update
   */
  export type AllocationRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a AllocationRecord.
     */
    data: XOR<AllocationRecordUpdateInput, AllocationRecordUncheckedUpdateInput>
    /**
     * Choose, which AllocationRecord to update.
     */
    where: AllocationRecordWhereUniqueInput
  }

  /**
   * AllocationRecord updateMany
   */
  export type AllocationRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AllocationRecords.
     */
    data: XOR<AllocationRecordUpdateManyMutationInput, AllocationRecordUncheckedUpdateManyInput>
    /**
     * Filter which AllocationRecords to update
     */
    where?: AllocationRecordWhereInput
  }

  /**
   * AllocationRecord upsert
   */
  export type AllocationRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the AllocationRecord to update in case it exists.
     */
    where: AllocationRecordWhereUniqueInput
    /**
     * In case the AllocationRecord found by the `where` argument doesn't exist, create a new AllocationRecord with this data.
     */
    create: XOR<AllocationRecordCreateInput, AllocationRecordUncheckedCreateInput>
    /**
     * In case the AllocationRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllocationRecordUpdateInput, AllocationRecordUncheckedUpdateInput>
  }

  /**
   * AllocationRecord delete
   */
  export type AllocationRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
    /**
     * Filter which AllocationRecord to delete.
     */
    where: AllocationRecordWhereUniqueInput
  }

  /**
   * AllocationRecord deleteMany
   */
  export type AllocationRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AllocationRecords to delete
     */
    where?: AllocationRecordWhereInput
  }

  /**
   * AllocationRecord without action
   */
  export type AllocationRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocationRecord
     */
    select?: AllocationRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationRecordInclude<ExtArgs> | null
  }


  /**
   * Model Movement
   */

  export type AggregateMovement = {
    _count: MovementCountAggregateOutputType | null
    _avg: MovementAvgAggregateOutputType | null
    _sum: MovementSumAggregateOutputType | null
    _min: MovementMinAggregateOutputType | null
    _max: MovementMaxAggregateOutputType | null
  }

  export type MovementAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type MovementSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type MovementMinAggregateOutputType = {
    id: string | null
    simulationId: string | null
    kind: $Enums.MovementKind | null
    name: string | null
    amount: Decimal | null
    frequency: $Enums.Frequency | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type MovementMaxAggregateOutputType = {
    id: string | null
    simulationId: string | null
    kind: $Enums.MovementKind | null
    name: string | null
    amount: Decimal | null
    frequency: $Enums.Frequency | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type MovementCountAggregateOutputType = {
    id: number
    simulationId: number
    kind: number
    name: number
    amount: number
    frequency: number
    startDate: number
    endDate: number
    createdAt: number
    _all: number
  }


  export type MovementAvgAggregateInputType = {
    amount?: true
  }

  export type MovementSumAggregateInputType = {
    amount?: true
  }

  export type MovementMinAggregateInputType = {
    id?: true
    simulationId?: true
    kind?: true
    name?: true
    amount?: true
    frequency?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type MovementMaxAggregateInputType = {
    id?: true
    simulationId?: true
    kind?: true
    name?: true
    amount?: true
    frequency?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type MovementCountAggregateInputType = {
    id?: true
    simulationId?: true
    kind?: true
    name?: true
    amount?: true
    frequency?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    _all?: true
  }

  export type MovementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movement to aggregate.
     */
    where?: MovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movements to fetch.
     */
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Movements
    **/
    _count?: true | MovementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovementMaxAggregateInputType
  }

  export type GetMovementAggregateType<T extends MovementAggregateArgs> = {
        [P in keyof T & keyof AggregateMovement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovement[P]>
      : GetScalarType<T[P], AggregateMovement[P]>
  }




  export type MovementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovementWhereInput
    orderBy?: MovementOrderByWithAggregationInput | MovementOrderByWithAggregationInput[]
    by: MovementScalarFieldEnum[] | MovementScalarFieldEnum
    having?: MovementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovementCountAggregateInputType | true
    _avg?: MovementAvgAggregateInputType
    _sum?: MovementSumAggregateInputType
    _min?: MovementMinAggregateInputType
    _max?: MovementMaxAggregateInputType
  }

  export type MovementGroupByOutputType = {
    id: string
    simulationId: string
    kind: $Enums.MovementKind
    name: string
    amount: Decimal
    frequency: $Enums.Frequency
    startDate: Date
    endDate: Date | null
    createdAt: Date
    _count: MovementCountAggregateOutputType | null
    _avg: MovementAvgAggregateOutputType | null
    _sum: MovementSumAggregateOutputType | null
    _min: MovementMinAggregateOutputType | null
    _max: MovementMaxAggregateOutputType | null
  }

  type GetMovementGroupByPayload<T extends MovementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovementGroupByOutputType[P]>
            : GetScalarType<T[P], MovementGroupByOutputType[P]>
        }
      >
    >


  export type MovementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    simulationId?: boolean
    kind?: boolean
    name?: boolean
    amount?: boolean
    frequency?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movement"]>

  export type MovementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    simulationId?: boolean
    kind?: boolean
    name?: boolean
    amount?: boolean
    frequency?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movement"]>

  export type MovementSelectScalar = {
    id?: boolean
    simulationId?: boolean
    kind?: boolean
    name?: boolean
    amount?: boolean
    frequency?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
  }

  export type MovementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }
  export type MovementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }

  export type $MovementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Movement"
    objects: {
      simulation: Prisma.$SimulationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      simulationId: string
      kind: $Enums.MovementKind
      name: string
      amount: Prisma.Decimal
      frequency: $Enums.Frequency
      startDate: Date
      endDate: Date | null
      createdAt: Date
    }, ExtArgs["result"]["movement"]>
    composites: {}
  }

  type MovementGetPayload<S extends boolean | null | undefined | MovementDefaultArgs> = $Result.GetResult<Prisma.$MovementPayload, S>

  type MovementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovementCountAggregateInputType | true
    }

  export interface MovementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Movement'], meta: { name: 'Movement' } }
    /**
     * Find zero or one Movement that matches the filter.
     * @param {MovementFindUniqueArgs} args - Arguments to find a Movement
     * @example
     * // Get one Movement
     * const movement = await prisma.movement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovementFindUniqueArgs>(args: SelectSubset<T, MovementFindUniqueArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Movement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovementFindUniqueOrThrowArgs} args - Arguments to find a Movement
     * @example
     * // Get one Movement
     * const movement = await prisma.movement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovementFindUniqueOrThrowArgs>(args: SelectSubset<T, MovementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Movement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementFindFirstArgs} args - Arguments to find a Movement
     * @example
     * // Get one Movement
     * const movement = await prisma.movement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovementFindFirstArgs>(args?: SelectSubset<T, MovementFindFirstArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Movement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementFindFirstOrThrowArgs} args - Arguments to find a Movement
     * @example
     * // Get one Movement
     * const movement = await prisma.movement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovementFindFirstOrThrowArgs>(args?: SelectSubset<T, MovementFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Movements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movements
     * const movements = await prisma.movement.findMany()
     * 
     * // Get first 10 Movements
     * const movements = await prisma.movement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movementWithIdOnly = await prisma.movement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MovementFindManyArgs>(args?: SelectSubset<T, MovementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Movement.
     * @param {MovementCreateArgs} args - Arguments to create a Movement.
     * @example
     * // Create one Movement
     * const Movement = await prisma.movement.create({
     *   data: {
     *     // ... data to create a Movement
     *   }
     * })
     * 
     */
    create<T extends MovementCreateArgs>(args: SelectSubset<T, MovementCreateArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Movements.
     * @param {MovementCreateManyArgs} args - Arguments to create many Movements.
     * @example
     * // Create many Movements
     * const movement = await prisma.movement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovementCreateManyArgs>(args?: SelectSubset<T, MovementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Movements and returns the data saved in the database.
     * @param {MovementCreateManyAndReturnArgs} args - Arguments to create many Movements.
     * @example
     * // Create many Movements
     * const movement = await prisma.movement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Movements and only return the `id`
     * const movementWithIdOnly = await prisma.movement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MovementCreateManyAndReturnArgs>(args?: SelectSubset<T, MovementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Movement.
     * @param {MovementDeleteArgs} args - Arguments to delete one Movement.
     * @example
     * // Delete one Movement
     * const Movement = await prisma.movement.delete({
     *   where: {
     *     // ... filter to delete one Movement
     *   }
     * })
     * 
     */
    delete<T extends MovementDeleteArgs>(args: SelectSubset<T, MovementDeleteArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Movement.
     * @param {MovementUpdateArgs} args - Arguments to update one Movement.
     * @example
     * // Update one Movement
     * const movement = await prisma.movement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovementUpdateArgs>(args: SelectSubset<T, MovementUpdateArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Movements.
     * @param {MovementDeleteManyArgs} args - Arguments to filter Movements to delete.
     * @example
     * // Delete a few Movements
     * const { count } = await prisma.movement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovementDeleteManyArgs>(args?: SelectSubset<T, MovementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movements
     * const movement = await prisma.movement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovementUpdateManyArgs>(args: SelectSubset<T, MovementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Movement.
     * @param {MovementUpsertArgs} args - Arguments to update or create a Movement.
     * @example
     * // Update or create a Movement
     * const movement = await prisma.movement.upsert({
     *   create: {
     *     // ... data to create a Movement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movement we want to update
     *   }
     * })
     */
    upsert<T extends MovementUpsertArgs>(args: SelectSubset<T, MovementUpsertArgs<ExtArgs>>): Prisma__MovementClient<$Result.GetResult<Prisma.$MovementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Movements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementCountArgs} args - Arguments to filter Movements to count.
     * @example
     * // Count the number of Movements
     * const count = await prisma.movement.count({
     *   where: {
     *     // ... the filter for the Movements we want to count
     *   }
     * })
    **/
    count<T extends MovementCountArgs>(
      args?: Subset<T, MovementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovementAggregateArgs>(args: Subset<T, MovementAggregateArgs>): Prisma.PrismaPromise<GetMovementAggregateType<T>>

    /**
     * Group by Movement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovementGroupByArgs['orderBy'] }
        : { orderBy?: MovementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Movement model
   */
  readonly fields: MovementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Movement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    simulation<T extends SimulationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SimulationDefaultArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Movement model
   */ 
  interface MovementFieldRefs {
    readonly id: FieldRef<"Movement", 'String'>
    readonly simulationId: FieldRef<"Movement", 'String'>
    readonly kind: FieldRef<"Movement", 'MovementKind'>
    readonly name: FieldRef<"Movement", 'String'>
    readonly amount: FieldRef<"Movement", 'Decimal'>
    readonly frequency: FieldRef<"Movement", 'Frequency'>
    readonly startDate: FieldRef<"Movement", 'DateTime'>
    readonly endDate: FieldRef<"Movement", 'DateTime'>
    readonly createdAt: FieldRef<"Movement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Movement findUnique
   */
  export type MovementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movement to fetch.
     */
    where: MovementWhereUniqueInput
  }

  /**
   * Movement findUniqueOrThrow
   */
  export type MovementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movement to fetch.
     */
    where: MovementWhereUniqueInput
  }

  /**
   * Movement findFirst
   */
  export type MovementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movement to fetch.
     */
    where?: MovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movements to fetch.
     */
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movements.
     */
    cursor?: MovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movements.
     */
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * Movement findFirstOrThrow
   */
  export type MovementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movement to fetch.
     */
    where?: MovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movements to fetch.
     */
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movements.
     */
    cursor?: MovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movements.
     */
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * Movement findMany
   */
  export type MovementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter, which Movements to fetch.
     */
    where?: MovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movements to fetch.
     */
    orderBy?: MovementOrderByWithRelationInput | MovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Movements.
     */
    cursor?: MovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movements.
     */
    skip?: number
    distinct?: MovementScalarFieldEnum | MovementScalarFieldEnum[]
  }

  /**
   * Movement create
   */
  export type MovementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * The data needed to create a Movement.
     */
    data: XOR<MovementCreateInput, MovementUncheckedCreateInput>
  }

  /**
   * Movement createMany
   */
  export type MovementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Movements.
     */
    data: MovementCreateManyInput | MovementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Movement createManyAndReturn
   */
  export type MovementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Movements.
     */
    data: MovementCreateManyInput | MovementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Movement update
   */
  export type MovementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * The data needed to update a Movement.
     */
    data: XOR<MovementUpdateInput, MovementUncheckedUpdateInput>
    /**
     * Choose, which Movement to update.
     */
    where: MovementWhereUniqueInput
  }

  /**
   * Movement updateMany
   */
  export type MovementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Movements.
     */
    data: XOR<MovementUpdateManyMutationInput, MovementUncheckedUpdateManyInput>
    /**
     * Filter which Movements to update
     */
    where?: MovementWhereInput
  }

  /**
   * Movement upsert
   */
  export type MovementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * The filter to search for the Movement to update in case it exists.
     */
    where: MovementWhereUniqueInput
    /**
     * In case the Movement found by the `where` argument doesn't exist, create a new Movement with this data.
     */
    create: XOR<MovementCreateInput, MovementUncheckedCreateInput>
    /**
     * In case the Movement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovementUpdateInput, MovementUncheckedUpdateInput>
  }

  /**
   * Movement delete
   */
  export type MovementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
    /**
     * Filter which Movement to delete.
     */
    where: MovementWhereUniqueInput
  }

  /**
   * Movement deleteMany
   */
  export type MovementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movements to delete
     */
    where?: MovementWhereInput
  }

  /**
   * Movement without action
   */
  export type MovementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movement
     */
    select?: MovementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovementInclude<ExtArgs> | null
  }


  /**
   * Model Insurance
   */

  export type AggregateInsurance = {
    _count: InsuranceCountAggregateOutputType | null
    _avg: InsuranceAvgAggregateOutputType | null
    _sum: InsuranceSumAggregateOutputType | null
    _min: InsuranceMinAggregateOutputType | null
    _max: InsuranceMaxAggregateOutputType | null
  }

  export type InsuranceAvgAggregateOutputType = {
    durationMonths: number | null
    premiumMonth: Decimal | null
    insuredValue: Decimal | null
  }

  export type InsuranceSumAggregateOutputType = {
    durationMonths: number | null
    premiumMonth: Decimal | null
    insuredValue: Decimal | null
  }

  export type InsuranceMinAggregateOutputType = {
    id: string | null
    simulationId: string | null
    name: string | null
    type: $Enums.InsuranceType | null
    startDate: Date | null
    durationMonths: number | null
    premiumMonth: Decimal | null
    insuredValue: Decimal | null
  }

  export type InsuranceMaxAggregateOutputType = {
    id: string | null
    simulationId: string | null
    name: string | null
    type: $Enums.InsuranceType | null
    startDate: Date | null
    durationMonths: number | null
    premiumMonth: Decimal | null
    insuredValue: Decimal | null
  }

  export type InsuranceCountAggregateOutputType = {
    id: number
    simulationId: number
    name: number
    type: number
    startDate: number
    durationMonths: number
    premiumMonth: number
    insuredValue: number
    _all: number
  }


  export type InsuranceAvgAggregateInputType = {
    durationMonths?: true
    premiumMonth?: true
    insuredValue?: true
  }

  export type InsuranceSumAggregateInputType = {
    durationMonths?: true
    premiumMonth?: true
    insuredValue?: true
  }

  export type InsuranceMinAggregateInputType = {
    id?: true
    simulationId?: true
    name?: true
    type?: true
    startDate?: true
    durationMonths?: true
    premiumMonth?: true
    insuredValue?: true
  }

  export type InsuranceMaxAggregateInputType = {
    id?: true
    simulationId?: true
    name?: true
    type?: true
    startDate?: true
    durationMonths?: true
    premiumMonth?: true
    insuredValue?: true
  }

  export type InsuranceCountAggregateInputType = {
    id?: true
    simulationId?: true
    name?: true
    type?: true
    startDate?: true
    durationMonths?: true
    premiumMonth?: true
    insuredValue?: true
    _all?: true
  }

  export type InsuranceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insurance to aggregate.
     */
    where?: InsuranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insurances to fetch.
     */
    orderBy?: InsuranceOrderByWithRelationInput | InsuranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsuranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insurances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insurances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Insurances
    **/
    _count?: true | InsuranceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InsuranceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InsuranceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsuranceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsuranceMaxAggregateInputType
  }

  export type GetInsuranceAggregateType<T extends InsuranceAggregateArgs> = {
        [P in keyof T & keyof AggregateInsurance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsurance[P]>
      : GetScalarType<T[P], AggregateInsurance[P]>
  }




  export type InsuranceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsuranceWhereInput
    orderBy?: InsuranceOrderByWithAggregationInput | InsuranceOrderByWithAggregationInput[]
    by: InsuranceScalarFieldEnum[] | InsuranceScalarFieldEnum
    having?: InsuranceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsuranceCountAggregateInputType | true
    _avg?: InsuranceAvgAggregateInputType
    _sum?: InsuranceSumAggregateInputType
    _min?: InsuranceMinAggregateInputType
    _max?: InsuranceMaxAggregateInputType
  }

  export type InsuranceGroupByOutputType = {
    id: string
    simulationId: string
    name: string
    type: $Enums.InsuranceType
    startDate: Date
    durationMonths: number
    premiumMonth: Decimal
    insuredValue: Decimal
    _count: InsuranceCountAggregateOutputType | null
    _avg: InsuranceAvgAggregateOutputType | null
    _sum: InsuranceSumAggregateOutputType | null
    _min: InsuranceMinAggregateOutputType | null
    _max: InsuranceMaxAggregateOutputType | null
  }

  type GetInsuranceGroupByPayload<T extends InsuranceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsuranceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsuranceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsuranceGroupByOutputType[P]>
            : GetScalarType<T[P], InsuranceGroupByOutputType[P]>
        }
      >
    >


  export type InsuranceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    simulationId?: boolean
    name?: boolean
    type?: boolean
    startDate?: boolean
    durationMonths?: boolean
    premiumMonth?: boolean
    insuredValue?: boolean
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insurance"]>

  export type InsuranceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    simulationId?: boolean
    name?: boolean
    type?: boolean
    startDate?: boolean
    durationMonths?: boolean
    premiumMonth?: boolean
    insuredValue?: boolean
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insurance"]>

  export type InsuranceSelectScalar = {
    id?: boolean
    simulationId?: boolean
    name?: boolean
    type?: boolean
    startDate?: boolean
    durationMonths?: boolean
    premiumMonth?: boolean
    insuredValue?: boolean
  }

  export type InsuranceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }
  export type InsuranceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    simulation?: boolean | SimulationDefaultArgs<ExtArgs>
  }

  export type $InsurancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Insurance"
    objects: {
      simulation: Prisma.$SimulationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      simulationId: string
      name: string
      type: $Enums.InsuranceType
      startDate: Date
      durationMonths: number
      premiumMonth: Prisma.Decimal
      insuredValue: Prisma.Decimal
    }, ExtArgs["result"]["insurance"]>
    composites: {}
  }

  type InsuranceGetPayload<S extends boolean | null | undefined | InsuranceDefaultArgs> = $Result.GetResult<Prisma.$InsurancePayload, S>

  type InsuranceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InsuranceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InsuranceCountAggregateInputType | true
    }

  export interface InsuranceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Insurance'], meta: { name: 'Insurance' } }
    /**
     * Find zero or one Insurance that matches the filter.
     * @param {InsuranceFindUniqueArgs} args - Arguments to find a Insurance
     * @example
     * // Get one Insurance
     * const insurance = await prisma.insurance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsuranceFindUniqueArgs>(args: SelectSubset<T, InsuranceFindUniqueArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Insurance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InsuranceFindUniqueOrThrowArgs} args - Arguments to find a Insurance
     * @example
     * // Get one Insurance
     * const insurance = await prisma.insurance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsuranceFindUniqueOrThrowArgs>(args: SelectSubset<T, InsuranceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Insurance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceFindFirstArgs} args - Arguments to find a Insurance
     * @example
     * // Get one Insurance
     * const insurance = await prisma.insurance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsuranceFindFirstArgs>(args?: SelectSubset<T, InsuranceFindFirstArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Insurance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceFindFirstOrThrowArgs} args - Arguments to find a Insurance
     * @example
     * // Get one Insurance
     * const insurance = await prisma.insurance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsuranceFindFirstOrThrowArgs>(args?: SelectSubset<T, InsuranceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Insurances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Insurances
     * const insurances = await prisma.insurance.findMany()
     * 
     * // Get first 10 Insurances
     * const insurances = await prisma.insurance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insuranceWithIdOnly = await prisma.insurance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsuranceFindManyArgs>(args?: SelectSubset<T, InsuranceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Insurance.
     * @param {InsuranceCreateArgs} args - Arguments to create a Insurance.
     * @example
     * // Create one Insurance
     * const Insurance = await prisma.insurance.create({
     *   data: {
     *     // ... data to create a Insurance
     *   }
     * })
     * 
     */
    create<T extends InsuranceCreateArgs>(args: SelectSubset<T, InsuranceCreateArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Insurances.
     * @param {InsuranceCreateManyArgs} args - Arguments to create many Insurances.
     * @example
     * // Create many Insurances
     * const insurance = await prisma.insurance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsuranceCreateManyArgs>(args?: SelectSubset<T, InsuranceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Insurances and returns the data saved in the database.
     * @param {InsuranceCreateManyAndReturnArgs} args - Arguments to create many Insurances.
     * @example
     * // Create many Insurances
     * const insurance = await prisma.insurance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Insurances and only return the `id`
     * const insuranceWithIdOnly = await prisma.insurance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InsuranceCreateManyAndReturnArgs>(args?: SelectSubset<T, InsuranceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Insurance.
     * @param {InsuranceDeleteArgs} args - Arguments to delete one Insurance.
     * @example
     * // Delete one Insurance
     * const Insurance = await prisma.insurance.delete({
     *   where: {
     *     // ... filter to delete one Insurance
     *   }
     * })
     * 
     */
    delete<T extends InsuranceDeleteArgs>(args: SelectSubset<T, InsuranceDeleteArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Insurance.
     * @param {InsuranceUpdateArgs} args - Arguments to update one Insurance.
     * @example
     * // Update one Insurance
     * const insurance = await prisma.insurance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsuranceUpdateArgs>(args: SelectSubset<T, InsuranceUpdateArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Insurances.
     * @param {InsuranceDeleteManyArgs} args - Arguments to filter Insurances to delete.
     * @example
     * // Delete a few Insurances
     * const { count } = await prisma.insurance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsuranceDeleteManyArgs>(args?: SelectSubset<T, InsuranceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Insurances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Insurances
     * const insurance = await prisma.insurance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsuranceUpdateManyArgs>(args: SelectSubset<T, InsuranceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Insurance.
     * @param {InsuranceUpsertArgs} args - Arguments to update or create a Insurance.
     * @example
     * // Update or create a Insurance
     * const insurance = await prisma.insurance.upsert({
     *   create: {
     *     // ... data to create a Insurance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Insurance we want to update
     *   }
     * })
     */
    upsert<T extends InsuranceUpsertArgs>(args: SelectSubset<T, InsuranceUpsertArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Insurances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceCountArgs} args - Arguments to filter Insurances to count.
     * @example
     * // Count the number of Insurances
     * const count = await prisma.insurance.count({
     *   where: {
     *     // ... the filter for the Insurances we want to count
     *   }
     * })
    **/
    count<T extends InsuranceCountArgs>(
      args?: Subset<T, InsuranceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsuranceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Insurance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsuranceAggregateArgs>(args: Subset<T, InsuranceAggregateArgs>): Prisma.PrismaPromise<GetInsuranceAggregateType<T>>

    /**
     * Group by Insurance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsuranceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsuranceGroupByArgs['orderBy'] }
        : { orderBy?: InsuranceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsuranceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsuranceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Insurance model
   */
  readonly fields: InsuranceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Insurance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsuranceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    simulation<T extends SimulationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SimulationDefaultArgs<ExtArgs>>): Prisma__SimulationClient<$Result.GetResult<Prisma.$SimulationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Insurance model
   */ 
  interface InsuranceFieldRefs {
    readonly id: FieldRef<"Insurance", 'String'>
    readonly simulationId: FieldRef<"Insurance", 'String'>
    readonly name: FieldRef<"Insurance", 'String'>
    readonly type: FieldRef<"Insurance", 'InsuranceType'>
    readonly startDate: FieldRef<"Insurance", 'DateTime'>
    readonly durationMonths: FieldRef<"Insurance", 'Int'>
    readonly premiumMonth: FieldRef<"Insurance", 'Decimal'>
    readonly insuredValue: FieldRef<"Insurance", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Insurance findUnique
   */
  export type InsuranceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurance to fetch.
     */
    where: InsuranceWhereUniqueInput
  }

  /**
   * Insurance findUniqueOrThrow
   */
  export type InsuranceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurance to fetch.
     */
    where: InsuranceWhereUniqueInput
  }

  /**
   * Insurance findFirst
   */
  export type InsuranceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurance to fetch.
     */
    where?: InsuranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insurances to fetch.
     */
    orderBy?: InsuranceOrderByWithRelationInput | InsuranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insurances.
     */
    cursor?: InsuranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insurances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insurances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insurances.
     */
    distinct?: InsuranceScalarFieldEnum | InsuranceScalarFieldEnum[]
  }

  /**
   * Insurance findFirstOrThrow
   */
  export type InsuranceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurance to fetch.
     */
    where?: InsuranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insurances to fetch.
     */
    orderBy?: InsuranceOrderByWithRelationInput | InsuranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insurances.
     */
    cursor?: InsuranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insurances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insurances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insurances.
     */
    distinct?: InsuranceScalarFieldEnum | InsuranceScalarFieldEnum[]
  }

  /**
   * Insurance findMany
   */
  export type InsuranceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurances to fetch.
     */
    where?: InsuranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insurances to fetch.
     */
    orderBy?: InsuranceOrderByWithRelationInput | InsuranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Insurances.
     */
    cursor?: InsuranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insurances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insurances.
     */
    skip?: number
    distinct?: InsuranceScalarFieldEnum | InsuranceScalarFieldEnum[]
  }

  /**
   * Insurance create
   */
  export type InsuranceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * The data needed to create a Insurance.
     */
    data: XOR<InsuranceCreateInput, InsuranceUncheckedCreateInput>
  }

  /**
   * Insurance createMany
   */
  export type InsuranceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Insurances.
     */
    data: InsuranceCreateManyInput | InsuranceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Insurance createManyAndReturn
   */
  export type InsuranceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Insurances.
     */
    data: InsuranceCreateManyInput | InsuranceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Insurance update
   */
  export type InsuranceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * The data needed to update a Insurance.
     */
    data: XOR<InsuranceUpdateInput, InsuranceUncheckedUpdateInput>
    /**
     * Choose, which Insurance to update.
     */
    where: InsuranceWhereUniqueInput
  }

  /**
   * Insurance updateMany
   */
  export type InsuranceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Insurances.
     */
    data: XOR<InsuranceUpdateManyMutationInput, InsuranceUncheckedUpdateManyInput>
    /**
     * Filter which Insurances to update
     */
    where?: InsuranceWhereInput
  }

  /**
   * Insurance upsert
   */
  export type InsuranceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * The filter to search for the Insurance to update in case it exists.
     */
    where: InsuranceWhereUniqueInput
    /**
     * In case the Insurance found by the `where` argument doesn't exist, create a new Insurance with this data.
     */
    create: XOR<InsuranceCreateInput, InsuranceUncheckedCreateInput>
    /**
     * In case the Insurance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsuranceUpdateInput, InsuranceUncheckedUpdateInput>
  }

  /**
   * Insurance delete
   */
  export type InsuranceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter which Insurance to delete.
     */
    where: InsuranceWhereUniqueInput
  }

  /**
   * Insurance deleteMany
   */
  export type InsuranceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insurances to delete
     */
    where?: InsuranceWhereInput
  }

  /**
   * Insurance without action
   */
  export type InsuranceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SimulationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    version: 'version',
    isMain: 'isMain',
    isSituationNow: 'isSituationNow',
    startDate: 'startDate',
    realRate: 'realRate',
    lifeStatus: 'lifeStatus',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SimulationScalarFieldEnum = (typeof SimulationScalarFieldEnum)[keyof typeof SimulationScalarFieldEnum]


  export const AllocationScalarFieldEnum: {
    id: 'id',
    simulationId: 'simulationId',
    type: 'type',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type AllocationScalarFieldEnum = (typeof AllocationScalarFieldEnum)[keyof typeof AllocationScalarFieldEnum]


  export const AllocationRecordScalarFieldEnum: {
    id: 'id',
    allocationId: 'allocationId',
    date: 'date',
    value: 'value',
    hasLoan: 'hasLoan',
    loanStart: 'loanStart',
    loanInstallments: 'loanInstallments',
    loanRate: 'loanRate',
    downPayment: 'downPayment'
  };

  export type AllocationRecordScalarFieldEnum = (typeof AllocationRecordScalarFieldEnum)[keyof typeof AllocationRecordScalarFieldEnum]


  export const MovementScalarFieldEnum: {
    id: 'id',
    simulationId: 'simulationId',
    kind: 'kind',
    name: 'name',
    amount: 'amount',
    frequency: 'frequency',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt'
  };

  export type MovementScalarFieldEnum = (typeof MovementScalarFieldEnum)[keyof typeof MovementScalarFieldEnum]


  export const InsuranceScalarFieldEnum: {
    id: 'id',
    simulationId: 'simulationId',
    name: 'name',
    type: 'type',
    startDate: 'startDate',
    durationMonths: 'durationMonths',
    premiumMonth: 'premiumMonth',
    insuredValue: 'insuredValue'
  };

  export type InsuranceScalarFieldEnum = (typeof InsuranceScalarFieldEnum)[keyof typeof InsuranceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'LifeStatus'
   */
  export type EnumLifeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LifeStatus'>
    


  /**
   * Reference to a field of type 'LifeStatus[]'
   */
  export type ListEnumLifeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LifeStatus[]'>
    


  /**
   * Reference to a field of type 'AllocationType'
   */
  export type EnumAllocationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AllocationType'>
    


  /**
   * Reference to a field of type 'AllocationType[]'
   */
  export type ListEnumAllocationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AllocationType[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'MovementKind'
   */
  export type EnumMovementKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MovementKind'>
    


  /**
   * Reference to a field of type 'MovementKind[]'
   */
  export type ListEnumMovementKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MovementKind[]'>
    


  /**
   * Reference to a field of type 'Frequency'
   */
  export type EnumFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Frequency'>
    


  /**
   * Reference to a field of type 'Frequency[]'
   */
  export type ListEnumFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Frequency[]'>
    


  /**
   * Reference to a field of type 'InsuranceType'
   */
  export type EnumInsuranceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InsuranceType'>
    


  /**
   * Reference to a field of type 'InsuranceType[]'
   */
  export type ListEnumInsuranceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InsuranceType[]'>
    
  /**
   * Deep Input Types
   */


  export type SimulationWhereInput = {
    AND?: SimulationWhereInput | SimulationWhereInput[]
    OR?: SimulationWhereInput[]
    NOT?: SimulationWhereInput | SimulationWhereInput[]
    id?: StringFilter<"Simulation"> | string
    name?: StringFilter<"Simulation"> | string
    version?: IntFilter<"Simulation"> | number
    isMain?: BoolFilter<"Simulation"> | boolean
    isSituationNow?: BoolFilter<"Simulation"> | boolean
    startDate?: DateTimeFilter<"Simulation"> | Date | string
    realRate?: FloatFilter<"Simulation"> | number
    lifeStatus?: EnumLifeStatusFilter<"Simulation"> | $Enums.LifeStatus
    parentId?: StringNullableFilter<"Simulation"> | string | null
    createdAt?: DateTimeFilter<"Simulation"> | Date | string
    updatedAt?: DateTimeFilter<"Simulation"> | Date | string
    parent?: XOR<SimulationNullableRelationFilter, SimulationWhereInput> | null
    children?: SimulationListRelationFilter
    allocations?: AllocationListRelationFilter
    movements?: MovementListRelationFilter
    insurances?: InsuranceListRelationFilter
  }

  export type SimulationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    isMain?: SortOrder
    isSituationNow?: SortOrder
    startDate?: SortOrder
    realRate?: SortOrder
    lifeStatus?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: SimulationOrderByWithRelationInput
    children?: SimulationOrderByRelationAggregateInput
    allocations?: AllocationOrderByRelationAggregateInput
    movements?: MovementOrderByRelationAggregateInput
    insurances?: InsuranceOrderByRelationAggregateInput
  }

  export type SimulationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_version?: SimulationNameVersionCompoundUniqueInput
    AND?: SimulationWhereInput | SimulationWhereInput[]
    OR?: SimulationWhereInput[]
    NOT?: SimulationWhereInput | SimulationWhereInput[]
    name?: StringFilter<"Simulation"> | string
    version?: IntFilter<"Simulation"> | number
    isMain?: BoolFilter<"Simulation"> | boolean
    isSituationNow?: BoolFilter<"Simulation"> | boolean
    startDate?: DateTimeFilter<"Simulation"> | Date | string
    realRate?: FloatFilter<"Simulation"> | number
    lifeStatus?: EnumLifeStatusFilter<"Simulation"> | $Enums.LifeStatus
    parentId?: StringNullableFilter<"Simulation"> | string | null
    createdAt?: DateTimeFilter<"Simulation"> | Date | string
    updatedAt?: DateTimeFilter<"Simulation"> | Date | string
    parent?: XOR<SimulationNullableRelationFilter, SimulationWhereInput> | null
    children?: SimulationListRelationFilter
    allocations?: AllocationListRelationFilter
    movements?: MovementListRelationFilter
    insurances?: InsuranceListRelationFilter
  }, "id" | "name_version">

  export type SimulationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    isMain?: SortOrder
    isSituationNow?: SortOrder
    startDate?: SortOrder
    realRate?: SortOrder
    lifeStatus?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SimulationCountOrderByAggregateInput
    _avg?: SimulationAvgOrderByAggregateInput
    _max?: SimulationMaxOrderByAggregateInput
    _min?: SimulationMinOrderByAggregateInput
    _sum?: SimulationSumOrderByAggregateInput
  }

  export type SimulationScalarWhereWithAggregatesInput = {
    AND?: SimulationScalarWhereWithAggregatesInput | SimulationScalarWhereWithAggregatesInput[]
    OR?: SimulationScalarWhereWithAggregatesInput[]
    NOT?: SimulationScalarWhereWithAggregatesInput | SimulationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Simulation"> | string
    name?: StringWithAggregatesFilter<"Simulation"> | string
    version?: IntWithAggregatesFilter<"Simulation"> | number
    isMain?: BoolWithAggregatesFilter<"Simulation"> | boolean
    isSituationNow?: BoolWithAggregatesFilter<"Simulation"> | boolean
    startDate?: DateTimeWithAggregatesFilter<"Simulation"> | Date | string
    realRate?: FloatWithAggregatesFilter<"Simulation"> | number
    lifeStatus?: EnumLifeStatusWithAggregatesFilter<"Simulation"> | $Enums.LifeStatus
    parentId?: StringNullableWithAggregatesFilter<"Simulation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Simulation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Simulation"> | Date | string
  }

  export type AllocationWhereInput = {
    AND?: AllocationWhereInput | AllocationWhereInput[]
    OR?: AllocationWhereInput[]
    NOT?: AllocationWhereInput | AllocationWhereInput[]
    id?: StringFilter<"Allocation"> | string
    simulationId?: StringFilter<"Allocation"> | string
    type?: EnumAllocationTypeFilter<"Allocation"> | $Enums.AllocationType
    name?: StringFilter<"Allocation"> | string
    createdAt?: DateTimeFilter<"Allocation"> | Date | string
    records?: AllocationRecordListRelationFilter
    simulation?: XOR<SimulationRelationFilter, SimulationWhereInput>
  }

  export type AllocationOrderByWithRelationInput = {
    id?: SortOrder
    simulationId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    records?: AllocationRecordOrderByRelationAggregateInput
    simulation?: SimulationOrderByWithRelationInput
  }

  export type AllocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AllocationWhereInput | AllocationWhereInput[]
    OR?: AllocationWhereInput[]
    NOT?: AllocationWhereInput | AllocationWhereInput[]
    simulationId?: StringFilter<"Allocation"> | string
    type?: EnumAllocationTypeFilter<"Allocation"> | $Enums.AllocationType
    name?: StringFilter<"Allocation"> | string
    createdAt?: DateTimeFilter<"Allocation"> | Date | string
    records?: AllocationRecordListRelationFilter
    simulation?: XOR<SimulationRelationFilter, SimulationWhereInput>
  }, "id">

  export type AllocationOrderByWithAggregationInput = {
    id?: SortOrder
    simulationId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: AllocationCountOrderByAggregateInput
    _max?: AllocationMaxOrderByAggregateInput
    _min?: AllocationMinOrderByAggregateInput
  }

  export type AllocationScalarWhereWithAggregatesInput = {
    AND?: AllocationScalarWhereWithAggregatesInput | AllocationScalarWhereWithAggregatesInput[]
    OR?: AllocationScalarWhereWithAggregatesInput[]
    NOT?: AllocationScalarWhereWithAggregatesInput | AllocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Allocation"> | string
    simulationId?: StringWithAggregatesFilter<"Allocation"> | string
    type?: EnumAllocationTypeWithAggregatesFilter<"Allocation"> | $Enums.AllocationType
    name?: StringWithAggregatesFilter<"Allocation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Allocation"> | Date | string
  }

  export type AllocationRecordWhereInput = {
    AND?: AllocationRecordWhereInput | AllocationRecordWhereInput[]
    OR?: AllocationRecordWhereInput[]
    NOT?: AllocationRecordWhereInput | AllocationRecordWhereInput[]
    id?: StringFilter<"AllocationRecord"> | string
    allocationId?: StringFilter<"AllocationRecord"> | string
    date?: DateTimeFilter<"AllocationRecord"> | Date | string
    value?: DecimalFilter<"AllocationRecord"> | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFilter<"AllocationRecord"> | boolean
    loanStart?: DateTimeNullableFilter<"AllocationRecord"> | Date | string | null
    loanInstallments?: IntNullableFilter<"AllocationRecord"> | number | null
    loanRate?: FloatNullableFilter<"AllocationRecord"> | number | null
    downPayment?: DecimalNullableFilter<"AllocationRecord"> | Decimal | DecimalJsLike | number | string | null
    allocation?: XOR<AllocationRelationFilter, AllocationWhereInput>
  }

  export type AllocationRecordOrderByWithRelationInput = {
    id?: SortOrder
    allocationId?: SortOrder
    date?: SortOrder
    value?: SortOrder
    hasLoan?: SortOrder
    loanStart?: SortOrderInput | SortOrder
    loanInstallments?: SortOrderInput | SortOrder
    loanRate?: SortOrderInput | SortOrder
    downPayment?: SortOrderInput | SortOrder
    allocation?: AllocationOrderByWithRelationInput
  }

  export type AllocationRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AllocationRecordWhereInput | AllocationRecordWhereInput[]
    OR?: AllocationRecordWhereInput[]
    NOT?: AllocationRecordWhereInput | AllocationRecordWhereInput[]
    allocationId?: StringFilter<"AllocationRecord"> | string
    date?: DateTimeFilter<"AllocationRecord"> | Date | string
    value?: DecimalFilter<"AllocationRecord"> | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFilter<"AllocationRecord"> | boolean
    loanStart?: DateTimeNullableFilter<"AllocationRecord"> | Date | string | null
    loanInstallments?: IntNullableFilter<"AllocationRecord"> | number | null
    loanRate?: FloatNullableFilter<"AllocationRecord"> | number | null
    downPayment?: DecimalNullableFilter<"AllocationRecord"> | Decimal | DecimalJsLike | number | string | null
    allocation?: XOR<AllocationRelationFilter, AllocationWhereInput>
  }, "id">

  export type AllocationRecordOrderByWithAggregationInput = {
    id?: SortOrder
    allocationId?: SortOrder
    date?: SortOrder
    value?: SortOrder
    hasLoan?: SortOrder
    loanStart?: SortOrderInput | SortOrder
    loanInstallments?: SortOrderInput | SortOrder
    loanRate?: SortOrderInput | SortOrder
    downPayment?: SortOrderInput | SortOrder
    _count?: AllocationRecordCountOrderByAggregateInput
    _avg?: AllocationRecordAvgOrderByAggregateInput
    _max?: AllocationRecordMaxOrderByAggregateInput
    _min?: AllocationRecordMinOrderByAggregateInput
    _sum?: AllocationRecordSumOrderByAggregateInput
  }

  export type AllocationRecordScalarWhereWithAggregatesInput = {
    AND?: AllocationRecordScalarWhereWithAggregatesInput | AllocationRecordScalarWhereWithAggregatesInput[]
    OR?: AllocationRecordScalarWhereWithAggregatesInput[]
    NOT?: AllocationRecordScalarWhereWithAggregatesInput | AllocationRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AllocationRecord"> | string
    allocationId?: StringWithAggregatesFilter<"AllocationRecord"> | string
    date?: DateTimeWithAggregatesFilter<"AllocationRecord"> | Date | string
    value?: DecimalWithAggregatesFilter<"AllocationRecord"> | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolWithAggregatesFilter<"AllocationRecord"> | boolean
    loanStart?: DateTimeNullableWithAggregatesFilter<"AllocationRecord"> | Date | string | null
    loanInstallments?: IntNullableWithAggregatesFilter<"AllocationRecord"> | number | null
    loanRate?: FloatNullableWithAggregatesFilter<"AllocationRecord"> | number | null
    downPayment?: DecimalNullableWithAggregatesFilter<"AllocationRecord"> | Decimal | DecimalJsLike | number | string | null
  }

  export type MovementWhereInput = {
    AND?: MovementWhereInput | MovementWhereInput[]
    OR?: MovementWhereInput[]
    NOT?: MovementWhereInput | MovementWhereInput[]
    id?: StringFilter<"Movement"> | string
    simulationId?: StringFilter<"Movement"> | string
    kind?: EnumMovementKindFilter<"Movement"> | $Enums.MovementKind
    name?: StringFilter<"Movement"> | string
    amount?: DecimalFilter<"Movement"> | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFilter<"Movement"> | $Enums.Frequency
    startDate?: DateTimeFilter<"Movement"> | Date | string
    endDate?: DateTimeNullableFilter<"Movement"> | Date | string | null
    createdAt?: DateTimeFilter<"Movement"> | Date | string
    simulation?: XOR<SimulationRelationFilter, SimulationWhereInput>
  }

  export type MovementOrderByWithRelationInput = {
    id?: SortOrder
    simulationId?: SortOrder
    kind?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    simulation?: SimulationOrderByWithRelationInput
  }

  export type MovementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MovementWhereInput | MovementWhereInput[]
    OR?: MovementWhereInput[]
    NOT?: MovementWhereInput | MovementWhereInput[]
    simulationId?: StringFilter<"Movement"> | string
    kind?: EnumMovementKindFilter<"Movement"> | $Enums.MovementKind
    name?: StringFilter<"Movement"> | string
    amount?: DecimalFilter<"Movement"> | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFilter<"Movement"> | $Enums.Frequency
    startDate?: DateTimeFilter<"Movement"> | Date | string
    endDate?: DateTimeNullableFilter<"Movement"> | Date | string | null
    createdAt?: DateTimeFilter<"Movement"> | Date | string
    simulation?: XOR<SimulationRelationFilter, SimulationWhereInput>
  }, "id">

  export type MovementOrderByWithAggregationInput = {
    id?: SortOrder
    simulationId?: SortOrder
    kind?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MovementCountOrderByAggregateInput
    _avg?: MovementAvgOrderByAggregateInput
    _max?: MovementMaxOrderByAggregateInput
    _min?: MovementMinOrderByAggregateInput
    _sum?: MovementSumOrderByAggregateInput
  }

  export type MovementScalarWhereWithAggregatesInput = {
    AND?: MovementScalarWhereWithAggregatesInput | MovementScalarWhereWithAggregatesInput[]
    OR?: MovementScalarWhereWithAggregatesInput[]
    NOT?: MovementScalarWhereWithAggregatesInput | MovementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Movement"> | string
    simulationId?: StringWithAggregatesFilter<"Movement"> | string
    kind?: EnumMovementKindWithAggregatesFilter<"Movement"> | $Enums.MovementKind
    name?: StringWithAggregatesFilter<"Movement"> | string
    amount?: DecimalWithAggregatesFilter<"Movement"> | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyWithAggregatesFilter<"Movement"> | $Enums.Frequency
    startDate?: DateTimeWithAggregatesFilter<"Movement"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Movement"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Movement"> | Date | string
  }

  export type InsuranceWhereInput = {
    AND?: InsuranceWhereInput | InsuranceWhereInput[]
    OR?: InsuranceWhereInput[]
    NOT?: InsuranceWhereInput | InsuranceWhereInput[]
    id?: StringFilter<"Insurance"> | string
    simulationId?: StringFilter<"Insurance"> | string
    name?: StringFilter<"Insurance"> | string
    type?: EnumInsuranceTypeFilter<"Insurance"> | $Enums.InsuranceType
    startDate?: DateTimeFilter<"Insurance"> | Date | string
    durationMonths?: IntFilter<"Insurance"> | number
    premiumMonth?: DecimalFilter<"Insurance"> | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFilter<"Insurance"> | Decimal | DecimalJsLike | number | string
    simulation?: XOR<SimulationRelationFilter, SimulationWhereInput>
  }

  export type InsuranceOrderByWithRelationInput = {
    id?: SortOrder
    simulationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    premiumMonth?: SortOrder
    insuredValue?: SortOrder
    simulation?: SimulationOrderByWithRelationInput
  }

  export type InsuranceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InsuranceWhereInput | InsuranceWhereInput[]
    OR?: InsuranceWhereInput[]
    NOT?: InsuranceWhereInput | InsuranceWhereInput[]
    simulationId?: StringFilter<"Insurance"> | string
    name?: StringFilter<"Insurance"> | string
    type?: EnumInsuranceTypeFilter<"Insurance"> | $Enums.InsuranceType
    startDate?: DateTimeFilter<"Insurance"> | Date | string
    durationMonths?: IntFilter<"Insurance"> | number
    premiumMonth?: DecimalFilter<"Insurance"> | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFilter<"Insurance"> | Decimal | DecimalJsLike | number | string
    simulation?: XOR<SimulationRelationFilter, SimulationWhereInput>
  }, "id">

  export type InsuranceOrderByWithAggregationInput = {
    id?: SortOrder
    simulationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    premiumMonth?: SortOrder
    insuredValue?: SortOrder
    _count?: InsuranceCountOrderByAggregateInput
    _avg?: InsuranceAvgOrderByAggregateInput
    _max?: InsuranceMaxOrderByAggregateInput
    _min?: InsuranceMinOrderByAggregateInput
    _sum?: InsuranceSumOrderByAggregateInput
  }

  export type InsuranceScalarWhereWithAggregatesInput = {
    AND?: InsuranceScalarWhereWithAggregatesInput | InsuranceScalarWhereWithAggregatesInput[]
    OR?: InsuranceScalarWhereWithAggregatesInput[]
    NOT?: InsuranceScalarWhereWithAggregatesInput | InsuranceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Insurance"> | string
    simulationId?: StringWithAggregatesFilter<"Insurance"> | string
    name?: StringWithAggregatesFilter<"Insurance"> | string
    type?: EnumInsuranceTypeWithAggregatesFilter<"Insurance"> | $Enums.InsuranceType
    startDate?: DateTimeWithAggregatesFilter<"Insurance"> | Date | string
    durationMonths?: IntWithAggregatesFilter<"Insurance"> | number
    premiumMonth?: DecimalWithAggregatesFilter<"Insurance"> | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalWithAggregatesFilter<"Insurance"> | Decimal | DecimalJsLike | number | string
  }

  export type SimulationCreateInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: SimulationCreateNestedOneWithoutChildrenInput
    children?: SimulationCreateNestedManyWithoutParentInput
    allocations?: AllocationCreateNestedManyWithoutSimulationInput
    movements?: MovementCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceCreateNestedManyWithoutSimulationInput
  }

  export type SimulationUncheckedCreateInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SimulationUncheckedCreateNestedManyWithoutParentInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutSimulationInput
    movements?: MovementUncheckedCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceUncheckedCreateNestedManyWithoutSimulationInput
  }

  export type SimulationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: SimulationUpdateOneWithoutChildrenNestedInput
    children?: SimulationUpdateManyWithoutParentNestedInput
    allocations?: AllocationUpdateManyWithoutSimulationNestedInput
    movements?: MovementUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SimulationUncheckedUpdateManyWithoutParentNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutSimulationNestedInput
    movements?: MovementUncheckedUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUncheckedUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationCreateManyInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SimulationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SimulationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllocationCreateInput = {
    id?: string
    type: $Enums.AllocationType
    name: string
    createdAt?: Date | string
    records?: AllocationRecordCreateNestedManyWithoutAllocationInput
    simulation: SimulationCreateNestedOneWithoutAllocationsInput
  }

  export type AllocationUncheckedCreateInput = {
    id?: string
    simulationId: string
    type: $Enums.AllocationType
    name: string
    createdAt?: Date | string
    records?: AllocationRecordUncheckedCreateNestedManyWithoutAllocationInput
  }

  export type AllocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAllocationTypeFieldUpdateOperationsInput | $Enums.AllocationType
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: AllocationRecordUpdateManyWithoutAllocationNestedInput
    simulation?: SimulationUpdateOneRequiredWithoutAllocationsNestedInput
  }

  export type AllocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    simulationId?: StringFieldUpdateOperationsInput | string
    type?: EnumAllocationTypeFieldUpdateOperationsInput | $Enums.AllocationType
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: AllocationRecordUncheckedUpdateManyWithoutAllocationNestedInput
  }

  export type AllocationCreateManyInput = {
    id?: string
    simulationId: string
    type: $Enums.AllocationType
    name: string
    createdAt?: Date | string
  }

  export type AllocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAllocationTypeFieldUpdateOperationsInput | $Enums.AllocationType
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    simulationId?: StringFieldUpdateOperationsInput | string
    type?: EnumAllocationTypeFieldUpdateOperationsInput | $Enums.AllocationType
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllocationRecordCreateInput = {
    id?: string
    date: Date | string
    value: Decimal | DecimalJsLike | number | string
    hasLoan?: boolean
    loanStart?: Date | string | null
    loanInstallments?: number | null
    loanRate?: number | null
    downPayment?: Decimal | DecimalJsLike | number | string | null
    allocation: AllocationCreateNestedOneWithoutRecordsInput
  }

  export type AllocationRecordUncheckedCreateInput = {
    id?: string
    allocationId: string
    date: Date | string
    value: Decimal | DecimalJsLike | number | string
    hasLoan?: boolean
    loanStart?: Date | string | null
    loanInstallments?: number | null
    loanRate?: number | null
    downPayment?: Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFieldUpdateOperationsInput | boolean
    loanStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanInstallments?: NullableIntFieldUpdateOperationsInput | number | null
    loanRate?: NullableFloatFieldUpdateOperationsInput | number | null
    downPayment?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    allocation?: AllocationUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type AllocationRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    allocationId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFieldUpdateOperationsInput | boolean
    loanStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanInstallments?: NullableIntFieldUpdateOperationsInput | number | null
    loanRate?: NullableFloatFieldUpdateOperationsInput | number | null
    downPayment?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRecordCreateManyInput = {
    id?: string
    allocationId: string
    date: Date | string
    value: Decimal | DecimalJsLike | number | string
    hasLoan?: boolean
    loanStart?: Date | string | null
    loanInstallments?: number | null
    loanRate?: number | null
    downPayment?: Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFieldUpdateOperationsInput | boolean
    loanStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanInstallments?: NullableIntFieldUpdateOperationsInput | number | null
    loanRate?: NullableFloatFieldUpdateOperationsInput | number | null
    downPayment?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    allocationId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFieldUpdateOperationsInput | boolean
    loanStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanInstallments?: NullableIntFieldUpdateOperationsInput | number | null
    loanRate?: NullableFloatFieldUpdateOperationsInput | number | null
    downPayment?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type MovementCreateInput = {
    id?: string
    kind: $Enums.MovementKind
    name: string
    amount: Decimal | DecimalJsLike | number | string
    frequency: $Enums.Frequency
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
    simulation: SimulationCreateNestedOneWithoutMovementsInput
  }

  export type MovementUncheckedCreateInput = {
    id?: string
    simulationId: string
    kind: $Enums.MovementKind
    name: string
    amount: Decimal | DecimalJsLike | number | string
    frequency: $Enums.Frequency
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type MovementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumMovementKindFieldUpdateOperationsInput | $Enums.MovementKind
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    simulation?: SimulationUpdateOneRequiredWithoutMovementsNestedInput
  }

  export type MovementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    simulationId?: StringFieldUpdateOperationsInput | string
    kind?: EnumMovementKindFieldUpdateOperationsInput | $Enums.MovementKind
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovementCreateManyInput = {
    id?: string
    simulationId: string
    kind: $Enums.MovementKind
    name: string
    amount: Decimal | DecimalJsLike | number | string
    frequency: $Enums.Frequency
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type MovementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumMovementKindFieldUpdateOperationsInput | $Enums.MovementKind
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    simulationId?: StringFieldUpdateOperationsInput | string
    kind?: EnumMovementKindFieldUpdateOperationsInput | $Enums.MovementKind
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceCreateInput = {
    id?: string
    name: string
    type: $Enums.InsuranceType
    startDate: Date | string
    durationMonths: number
    premiumMonth: Decimal | DecimalJsLike | number | string
    insuredValue: Decimal | DecimalJsLike | number | string
    simulation: SimulationCreateNestedOneWithoutInsurancesInput
  }

  export type InsuranceUncheckedCreateInput = {
    id?: string
    simulationId: string
    name: string
    type: $Enums.InsuranceType
    startDate: Date | string
    durationMonths: number
    premiumMonth: Decimal | DecimalJsLike | number | string
    insuredValue: Decimal | DecimalJsLike | number | string
  }

  export type InsuranceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    premiumMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    simulation?: SimulationUpdateOneRequiredWithoutInsurancesNestedInput
  }

  export type InsuranceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    simulationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    premiumMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InsuranceCreateManyInput = {
    id?: string
    simulationId: string
    name: string
    type: $Enums.InsuranceType
    startDate: Date | string
    durationMonths: number
    premiumMonth: Decimal | DecimalJsLike | number | string
    insuredValue: Decimal | DecimalJsLike | number | string
  }

  export type InsuranceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    premiumMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InsuranceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    simulationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    premiumMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumLifeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LifeStatus | EnumLifeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LifeStatus[] | ListEnumLifeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LifeStatus[] | ListEnumLifeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLifeStatusFilter<$PrismaModel> | $Enums.LifeStatus
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SimulationNullableRelationFilter = {
    is?: SimulationWhereInput | null
    isNot?: SimulationWhereInput | null
  }

  export type SimulationListRelationFilter = {
    every?: SimulationWhereInput
    some?: SimulationWhereInput
    none?: SimulationWhereInput
  }

  export type AllocationListRelationFilter = {
    every?: AllocationWhereInput
    some?: AllocationWhereInput
    none?: AllocationWhereInput
  }

  export type MovementListRelationFilter = {
    every?: MovementWhereInput
    some?: MovementWhereInput
    none?: MovementWhereInput
  }

  export type InsuranceListRelationFilter = {
    every?: InsuranceWhereInput
    some?: InsuranceWhereInput
    none?: InsuranceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SimulationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AllocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MovementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InsuranceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SimulationNameVersionCompoundUniqueInput = {
    name: string
    version: number
  }

  export type SimulationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    isMain?: SortOrder
    isSituationNow?: SortOrder
    startDate?: SortOrder
    realRate?: SortOrder
    lifeStatus?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SimulationAvgOrderByAggregateInput = {
    version?: SortOrder
    realRate?: SortOrder
  }

  export type SimulationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    isMain?: SortOrder
    isSituationNow?: SortOrder
    startDate?: SortOrder
    realRate?: SortOrder
    lifeStatus?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SimulationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    isMain?: SortOrder
    isSituationNow?: SortOrder
    startDate?: SortOrder
    realRate?: SortOrder
    lifeStatus?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SimulationSumOrderByAggregateInput = {
    version?: SortOrder
    realRate?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumLifeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LifeStatus | EnumLifeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LifeStatus[] | ListEnumLifeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LifeStatus[] | ListEnumLifeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLifeStatusWithAggregatesFilter<$PrismaModel> | $Enums.LifeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLifeStatusFilter<$PrismaModel>
    _max?: NestedEnumLifeStatusFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumAllocationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AllocationType | EnumAllocationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AllocationType[] | ListEnumAllocationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AllocationType[] | ListEnumAllocationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAllocationTypeFilter<$PrismaModel> | $Enums.AllocationType
  }

  export type AllocationRecordListRelationFilter = {
    every?: AllocationRecordWhereInput
    some?: AllocationRecordWhereInput
    none?: AllocationRecordWhereInput
  }

  export type SimulationRelationFilter = {
    is?: SimulationWhereInput
    isNot?: SimulationWhereInput
  }

  export type AllocationRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AllocationCountOrderByAggregateInput = {
    id?: SortOrder
    simulationId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type AllocationMaxOrderByAggregateInput = {
    id?: SortOrder
    simulationId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type AllocationMinOrderByAggregateInput = {
    id?: SortOrder
    simulationId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumAllocationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AllocationType | EnumAllocationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AllocationType[] | ListEnumAllocationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AllocationType[] | ListEnumAllocationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAllocationTypeWithAggregatesFilter<$PrismaModel> | $Enums.AllocationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAllocationTypeFilter<$PrismaModel>
    _max?: NestedEnumAllocationTypeFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRelationFilter = {
    is?: AllocationWhereInput
    isNot?: AllocationWhereInput
  }

  export type AllocationRecordCountOrderByAggregateInput = {
    id?: SortOrder
    allocationId?: SortOrder
    date?: SortOrder
    value?: SortOrder
    hasLoan?: SortOrder
    loanStart?: SortOrder
    loanInstallments?: SortOrder
    loanRate?: SortOrder
    downPayment?: SortOrder
  }

  export type AllocationRecordAvgOrderByAggregateInput = {
    value?: SortOrder
    loanInstallments?: SortOrder
    loanRate?: SortOrder
    downPayment?: SortOrder
  }

  export type AllocationRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    allocationId?: SortOrder
    date?: SortOrder
    value?: SortOrder
    hasLoan?: SortOrder
    loanStart?: SortOrder
    loanInstallments?: SortOrder
    loanRate?: SortOrder
    downPayment?: SortOrder
  }

  export type AllocationRecordMinOrderByAggregateInput = {
    id?: SortOrder
    allocationId?: SortOrder
    date?: SortOrder
    value?: SortOrder
    hasLoan?: SortOrder
    loanStart?: SortOrder
    loanInstallments?: SortOrder
    loanRate?: SortOrder
    downPayment?: SortOrder
  }

  export type AllocationRecordSumOrderByAggregateInput = {
    value?: SortOrder
    loanInstallments?: SortOrder
    loanRate?: SortOrder
    downPayment?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumMovementKindFilter<$PrismaModel = never> = {
    equals?: $Enums.MovementKind | EnumMovementKindFieldRefInput<$PrismaModel>
    in?: $Enums.MovementKind[] | ListEnumMovementKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.MovementKind[] | ListEnumMovementKindFieldRefInput<$PrismaModel>
    not?: NestedEnumMovementKindFilter<$PrismaModel> | $Enums.MovementKind
  }

  export type EnumFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumFrequencyFilter<$PrismaModel> | $Enums.Frequency
  }

  export type MovementCountOrderByAggregateInput = {
    id?: SortOrder
    simulationId?: SortOrder
    kind?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type MovementAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type MovementMaxOrderByAggregateInput = {
    id?: SortOrder
    simulationId?: SortOrder
    kind?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type MovementMinOrderByAggregateInput = {
    id?: SortOrder
    simulationId?: SortOrder
    kind?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type MovementSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumMovementKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MovementKind | EnumMovementKindFieldRefInput<$PrismaModel>
    in?: $Enums.MovementKind[] | ListEnumMovementKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.MovementKind[] | ListEnumMovementKindFieldRefInput<$PrismaModel>
    not?: NestedEnumMovementKindWithAggregatesFilter<$PrismaModel> | $Enums.MovementKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMovementKindFilter<$PrismaModel>
    _max?: NestedEnumMovementKindFilter<$PrismaModel>
  }

  export type EnumFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.Frequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFrequencyFilter<$PrismaModel>
    _max?: NestedEnumFrequencyFilter<$PrismaModel>
  }

  export type EnumInsuranceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InsuranceType | EnumInsuranceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInsuranceTypeFilter<$PrismaModel> | $Enums.InsuranceType
  }

  export type InsuranceCountOrderByAggregateInput = {
    id?: SortOrder
    simulationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    premiumMonth?: SortOrder
    insuredValue?: SortOrder
  }

  export type InsuranceAvgOrderByAggregateInput = {
    durationMonths?: SortOrder
    premiumMonth?: SortOrder
    insuredValue?: SortOrder
  }

  export type InsuranceMaxOrderByAggregateInput = {
    id?: SortOrder
    simulationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    premiumMonth?: SortOrder
    insuredValue?: SortOrder
  }

  export type InsuranceMinOrderByAggregateInput = {
    id?: SortOrder
    simulationId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    premiumMonth?: SortOrder
    insuredValue?: SortOrder
  }

  export type InsuranceSumOrderByAggregateInput = {
    durationMonths?: SortOrder
    premiumMonth?: SortOrder
    insuredValue?: SortOrder
  }

  export type EnumInsuranceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InsuranceType | EnumInsuranceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInsuranceTypeWithAggregatesFilter<$PrismaModel> | $Enums.InsuranceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInsuranceTypeFilter<$PrismaModel>
    _max?: NestedEnumInsuranceTypeFilter<$PrismaModel>
  }

  export type SimulationCreateNestedOneWithoutChildrenInput = {
    create?: XOR<SimulationCreateWithoutChildrenInput, SimulationUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: SimulationCreateOrConnectWithoutChildrenInput
    connect?: SimulationWhereUniqueInput
  }

  export type SimulationCreateNestedManyWithoutParentInput = {
    create?: XOR<SimulationCreateWithoutParentInput, SimulationUncheckedCreateWithoutParentInput> | SimulationCreateWithoutParentInput[] | SimulationUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SimulationCreateOrConnectWithoutParentInput | SimulationCreateOrConnectWithoutParentInput[]
    createMany?: SimulationCreateManyParentInputEnvelope
    connect?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
  }

  export type AllocationCreateNestedManyWithoutSimulationInput = {
    create?: XOR<AllocationCreateWithoutSimulationInput, AllocationUncheckedCreateWithoutSimulationInput> | AllocationCreateWithoutSimulationInput[] | AllocationUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutSimulationInput | AllocationCreateOrConnectWithoutSimulationInput[]
    createMany?: AllocationCreateManySimulationInputEnvelope
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
  }

  export type MovementCreateNestedManyWithoutSimulationInput = {
    create?: XOR<MovementCreateWithoutSimulationInput, MovementUncheckedCreateWithoutSimulationInput> | MovementCreateWithoutSimulationInput[] | MovementUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutSimulationInput | MovementCreateOrConnectWithoutSimulationInput[]
    createMany?: MovementCreateManySimulationInputEnvelope
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
  }

  export type InsuranceCreateNestedManyWithoutSimulationInput = {
    create?: XOR<InsuranceCreateWithoutSimulationInput, InsuranceUncheckedCreateWithoutSimulationInput> | InsuranceCreateWithoutSimulationInput[] | InsuranceUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: InsuranceCreateOrConnectWithoutSimulationInput | InsuranceCreateOrConnectWithoutSimulationInput[]
    createMany?: InsuranceCreateManySimulationInputEnvelope
    connect?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
  }

  export type SimulationUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<SimulationCreateWithoutParentInput, SimulationUncheckedCreateWithoutParentInput> | SimulationCreateWithoutParentInput[] | SimulationUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SimulationCreateOrConnectWithoutParentInput | SimulationCreateOrConnectWithoutParentInput[]
    createMany?: SimulationCreateManyParentInputEnvelope
    connect?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
  }

  export type AllocationUncheckedCreateNestedManyWithoutSimulationInput = {
    create?: XOR<AllocationCreateWithoutSimulationInput, AllocationUncheckedCreateWithoutSimulationInput> | AllocationCreateWithoutSimulationInput[] | AllocationUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutSimulationInput | AllocationCreateOrConnectWithoutSimulationInput[]
    createMany?: AllocationCreateManySimulationInputEnvelope
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
  }

  export type MovementUncheckedCreateNestedManyWithoutSimulationInput = {
    create?: XOR<MovementCreateWithoutSimulationInput, MovementUncheckedCreateWithoutSimulationInput> | MovementCreateWithoutSimulationInput[] | MovementUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutSimulationInput | MovementCreateOrConnectWithoutSimulationInput[]
    createMany?: MovementCreateManySimulationInputEnvelope
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
  }

  export type InsuranceUncheckedCreateNestedManyWithoutSimulationInput = {
    create?: XOR<InsuranceCreateWithoutSimulationInput, InsuranceUncheckedCreateWithoutSimulationInput> | InsuranceCreateWithoutSimulationInput[] | InsuranceUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: InsuranceCreateOrConnectWithoutSimulationInput | InsuranceCreateOrConnectWithoutSimulationInput[]
    createMany?: InsuranceCreateManySimulationInputEnvelope
    connect?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumLifeStatusFieldUpdateOperationsInput = {
    set?: $Enums.LifeStatus
  }

  export type SimulationUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<SimulationCreateWithoutChildrenInput, SimulationUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: SimulationCreateOrConnectWithoutChildrenInput
    upsert?: SimulationUpsertWithoutChildrenInput
    disconnect?: SimulationWhereInput | boolean
    delete?: SimulationWhereInput | boolean
    connect?: SimulationWhereUniqueInput
    update?: XOR<XOR<SimulationUpdateToOneWithWhereWithoutChildrenInput, SimulationUpdateWithoutChildrenInput>, SimulationUncheckedUpdateWithoutChildrenInput>
  }

  export type SimulationUpdateManyWithoutParentNestedInput = {
    create?: XOR<SimulationCreateWithoutParentInput, SimulationUncheckedCreateWithoutParentInput> | SimulationCreateWithoutParentInput[] | SimulationUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SimulationCreateOrConnectWithoutParentInput | SimulationCreateOrConnectWithoutParentInput[]
    upsert?: SimulationUpsertWithWhereUniqueWithoutParentInput | SimulationUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: SimulationCreateManyParentInputEnvelope
    set?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
    disconnect?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
    delete?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
    connect?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
    update?: SimulationUpdateWithWhereUniqueWithoutParentInput | SimulationUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: SimulationUpdateManyWithWhereWithoutParentInput | SimulationUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: SimulationScalarWhereInput | SimulationScalarWhereInput[]
  }

  export type AllocationUpdateManyWithoutSimulationNestedInput = {
    create?: XOR<AllocationCreateWithoutSimulationInput, AllocationUncheckedCreateWithoutSimulationInput> | AllocationCreateWithoutSimulationInput[] | AllocationUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutSimulationInput | AllocationCreateOrConnectWithoutSimulationInput[]
    upsert?: AllocationUpsertWithWhereUniqueWithoutSimulationInput | AllocationUpsertWithWhereUniqueWithoutSimulationInput[]
    createMany?: AllocationCreateManySimulationInputEnvelope
    set?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    disconnect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    delete?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    update?: AllocationUpdateWithWhereUniqueWithoutSimulationInput | AllocationUpdateWithWhereUniqueWithoutSimulationInput[]
    updateMany?: AllocationUpdateManyWithWhereWithoutSimulationInput | AllocationUpdateManyWithWhereWithoutSimulationInput[]
    deleteMany?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
  }

  export type MovementUpdateManyWithoutSimulationNestedInput = {
    create?: XOR<MovementCreateWithoutSimulationInput, MovementUncheckedCreateWithoutSimulationInput> | MovementCreateWithoutSimulationInput[] | MovementUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutSimulationInput | MovementCreateOrConnectWithoutSimulationInput[]
    upsert?: MovementUpsertWithWhereUniqueWithoutSimulationInput | MovementUpsertWithWhereUniqueWithoutSimulationInput[]
    createMany?: MovementCreateManySimulationInputEnvelope
    set?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    disconnect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    delete?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    update?: MovementUpdateWithWhereUniqueWithoutSimulationInput | MovementUpdateWithWhereUniqueWithoutSimulationInput[]
    updateMany?: MovementUpdateManyWithWhereWithoutSimulationInput | MovementUpdateManyWithWhereWithoutSimulationInput[]
    deleteMany?: MovementScalarWhereInput | MovementScalarWhereInput[]
  }

  export type InsuranceUpdateManyWithoutSimulationNestedInput = {
    create?: XOR<InsuranceCreateWithoutSimulationInput, InsuranceUncheckedCreateWithoutSimulationInput> | InsuranceCreateWithoutSimulationInput[] | InsuranceUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: InsuranceCreateOrConnectWithoutSimulationInput | InsuranceCreateOrConnectWithoutSimulationInput[]
    upsert?: InsuranceUpsertWithWhereUniqueWithoutSimulationInput | InsuranceUpsertWithWhereUniqueWithoutSimulationInput[]
    createMany?: InsuranceCreateManySimulationInputEnvelope
    set?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
    disconnect?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
    delete?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
    connect?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
    update?: InsuranceUpdateWithWhereUniqueWithoutSimulationInput | InsuranceUpdateWithWhereUniqueWithoutSimulationInput[]
    updateMany?: InsuranceUpdateManyWithWhereWithoutSimulationInput | InsuranceUpdateManyWithWhereWithoutSimulationInput[]
    deleteMany?: InsuranceScalarWhereInput | InsuranceScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SimulationUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<SimulationCreateWithoutParentInput, SimulationUncheckedCreateWithoutParentInput> | SimulationCreateWithoutParentInput[] | SimulationUncheckedCreateWithoutParentInput[]
    connectOrCreate?: SimulationCreateOrConnectWithoutParentInput | SimulationCreateOrConnectWithoutParentInput[]
    upsert?: SimulationUpsertWithWhereUniqueWithoutParentInput | SimulationUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: SimulationCreateManyParentInputEnvelope
    set?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
    disconnect?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
    delete?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
    connect?: SimulationWhereUniqueInput | SimulationWhereUniqueInput[]
    update?: SimulationUpdateWithWhereUniqueWithoutParentInput | SimulationUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: SimulationUpdateManyWithWhereWithoutParentInput | SimulationUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: SimulationScalarWhereInput | SimulationScalarWhereInput[]
  }

  export type AllocationUncheckedUpdateManyWithoutSimulationNestedInput = {
    create?: XOR<AllocationCreateWithoutSimulationInput, AllocationUncheckedCreateWithoutSimulationInput> | AllocationCreateWithoutSimulationInput[] | AllocationUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutSimulationInput | AllocationCreateOrConnectWithoutSimulationInput[]
    upsert?: AllocationUpsertWithWhereUniqueWithoutSimulationInput | AllocationUpsertWithWhereUniqueWithoutSimulationInput[]
    createMany?: AllocationCreateManySimulationInputEnvelope
    set?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    disconnect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    delete?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    update?: AllocationUpdateWithWhereUniqueWithoutSimulationInput | AllocationUpdateWithWhereUniqueWithoutSimulationInput[]
    updateMany?: AllocationUpdateManyWithWhereWithoutSimulationInput | AllocationUpdateManyWithWhereWithoutSimulationInput[]
    deleteMany?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
  }

  export type MovementUncheckedUpdateManyWithoutSimulationNestedInput = {
    create?: XOR<MovementCreateWithoutSimulationInput, MovementUncheckedCreateWithoutSimulationInput> | MovementCreateWithoutSimulationInput[] | MovementUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: MovementCreateOrConnectWithoutSimulationInput | MovementCreateOrConnectWithoutSimulationInput[]
    upsert?: MovementUpsertWithWhereUniqueWithoutSimulationInput | MovementUpsertWithWhereUniqueWithoutSimulationInput[]
    createMany?: MovementCreateManySimulationInputEnvelope
    set?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    disconnect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    delete?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    connect?: MovementWhereUniqueInput | MovementWhereUniqueInput[]
    update?: MovementUpdateWithWhereUniqueWithoutSimulationInput | MovementUpdateWithWhereUniqueWithoutSimulationInput[]
    updateMany?: MovementUpdateManyWithWhereWithoutSimulationInput | MovementUpdateManyWithWhereWithoutSimulationInput[]
    deleteMany?: MovementScalarWhereInput | MovementScalarWhereInput[]
  }

  export type InsuranceUncheckedUpdateManyWithoutSimulationNestedInput = {
    create?: XOR<InsuranceCreateWithoutSimulationInput, InsuranceUncheckedCreateWithoutSimulationInput> | InsuranceCreateWithoutSimulationInput[] | InsuranceUncheckedCreateWithoutSimulationInput[]
    connectOrCreate?: InsuranceCreateOrConnectWithoutSimulationInput | InsuranceCreateOrConnectWithoutSimulationInput[]
    upsert?: InsuranceUpsertWithWhereUniqueWithoutSimulationInput | InsuranceUpsertWithWhereUniqueWithoutSimulationInput[]
    createMany?: InsuranceCreateManySimulationInputEnvelope
    set?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
    disconnect?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
    delete?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
    connect?: InsuranceWhereUniqueInput | InsuranceWhereUniqueInput[]
    update?: InsuranceUpdateWithWhereUniqueWithoutSimulationInput | InsuranceUpdateWithWhereUniqueWithoutSimulationInput[]
    updateMany?: InsuranceUpdateManyWithWhereWithoutSimulationInput | InsuranceUpdateManyWithWhereWithoutSimulationInput[]
    deleteMany?: InsuranceScalarWhereInput | InsuranceScalarWhereInput[]
  }

  export type AllocationRecordCreateNestedManyWithoutAllocationInput = {
    create?: XOR<AllocationRecordCreateWithoutAllocationInput, AllocationRecordUncheckedCreateWithoutAllocationInput> | AllocationRecordCreateWithoutAllocationInput[] | AllocationRecordUncheckedCreateWithoutAllocationInput[]
    connectOrCreate?: AllocationRecordCreateOrConnectWithoutAllocationInput | AllocationRecordCreateOrConnectWithoutAllocationInput[]
    createMany?: AllocationRecordCreateManyAllocationInputEnvelope
    connect?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
  }

  export type SimulationCreateNestedOneWithoutAllocationsInput = {
    create?: XOR<SimulationCreateWithoutAllocationsInput, SimulationUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: SimulationCreateOrConnectWithoutAllocationsInput
    connect?: SimulationWhereUniqueInput
  }

  export type AllocationRecordUncheckedCreateNestedManyWithoutAllocationInput = {
    create?: XOR<AllocationRecordCreateWithoutAllocationInput, AllocationRecordUncheckedCreateWithoutAllocationInput> | AllocationRecordCreateWithoutAllocationInput[] | AllocationRecordUncheckedCreateWithoutAllocationInput[]
    connectOrCreate?: AllocationRecordCreateOrConnectWithoutAllocationInput | AllocationRecordCreateOrConnectWithoutAllocationInput[]
    createMany?: AllocationRecordCreateManyAllocationInputEnvelope
    connect?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
  }

  export type EnumAllocationTypeFieldUpdateOperationsInput = {
    set?: $Enums.AllocationType
  }

  export type AllocationRecordUpdateManyWithoutAllocationNestedInput = {
    create?: XOR<AllocationRecordCreateWithoutAllocationInput, AllocationRecordUncheckedCreateWithoutAllocationInput> | AllocationRecordCreateWithoutAllocationInput[] | AllocationRecordUncheckedCreateWithoutAllocationInput[]
    connectOrCreate?: AllocationRecordCreateOrConnectWithoutAllocationInput | AllocationRecordCreateOrConnectWithoutAllocationInput[]
    upsert?: AllocationRecordUpsertWithWhereUniqueWithoutAllocationInput | AllocationRecordUpsertWithWhereUniqueWithoutAllocationInput[]
    createMany?: AllocationRecordCreateManyAllocationInputEnvelope
    set?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
    disconnect?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
    delete?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
    connect?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
    update?: AllocationRecordUpdateWithWhereUniqueWithoutAllocationInput | AllocationRecordUpdateWithWhereUniqueWithoutAllocationInput[]
    updateMany?: AllocationRecordUpdateManyWithWhereWithoutAllocationInput | AllocationRecordUpdateManyWithWhereWithoutAllocationInput[]
    deleteMany?: AllocationRecordScalarWhereInput | AllocationRecordScalarWhereInput[]
  }

  export type SimulationUpdateOneRequiredWithoutAllocationsNestedInput = {
    create?: XOR<SimulationCreateWithoutAllocationsInput, SimulationUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: SimulationCreateOrConnectWithoutAllocationsInput
    upsert?: SimulationUpsertWithoutAllocationsInput
    connect?: SimulationWhereUniqueInput
    update?: XOR<XOR<SimulationUpdateToOneWithWhereWithoutAllocationsInput, SimulationUpdateWithoutAllocationsInput>, SimulationUncheckedUpdateWithoutAllocationsInput>
  }

  export type AllocationRecordUncheckedUpdateManyWithoutAllocationNestedInput = {
    create?: XOR<AllocationRecordCreateWithoutAllocationInput, AllocationRecordUncheckedCreateWithoutAllocationInput> | AllocationRecordCreateWithoutAllocationInput[] | AllocationRecordUncheckedCreateWithoutAllocationInput[]
    connectOrCreate?: AllocationRecordCreateOrConnectWithoutAllocationInput | AllocationRecordCreateOrConnectWithoutAllocationInput[]
    upsert?: AllocationRecordUpsertWithWhereUniqueWithoutAllocationInput | AllocationRecordUpsertWithWhereUniqueWithoutAllocationInput[]
    createMany?: AllocationRecordCreateManyAllocationInputEnvelope
    set?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
    disconnect?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
    delete?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
    connect?: AllocationRecordWhereUniqueInput | AllocationRecordWhereUniqueInput[]
    update?: AllocationRecordUpdateWithWhereUniqueWithoutAllocationInput | AllocationRecordUpdateWithWhereUniqueWithoutAllocationInput[]
    updateMany?: AllocationRecordUpdateManyWithWhereWithoutAllocationInput | AllocationRecordUpdateManyWithWhereWithoutAllocationInput[]
    deleteMany?: AllocationRecordScalarWhereInput | AllocationRecordScalarWhereInput[]
  }

  export type AllocationCreateNestedOneWithoutRecordsInput = {
    create?: XOR<AllocationCreateWithoutRecordsInput, AllocationUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: AllocationCreateOrConnectWithoutRecordsInput
    connect?: AllocationWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type AllocationUpdateOneRequiredWithoutRecordsNestedInput = {
    create?: XOR<AllocationCreateWithoutRecordsInput, AllocationUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: AllocationCreateOrConnectWithoutRecordsInput
    upsert?: AllocationUpsertWithoutRecordsInput
    connect?: AllocationWhereUniqueInput
    update?: XOR<XOR<AllocationUpdateToOneWithWhereWithoutRecordsInput, AllocationUpdateWithoutRecordsInput>, AllocationUncheckedUpdateWithoutRecordsInput>
  }

  export type SimulationCreateNestedOneWithoutMovementsInput = {
    create?: XOR<SimulationCreateWithoutMovementsInput, SimulationUncheckedCreateWithoutMovementsInput>
    connectOrCreate?: SimulationCreateOrConnectWithoutMovementsInput
    connect?: SimulationWhereUniqueInput
  }

  export type EnumMovementKindFieldUpdateOperationsInput = {
    set?: $Enums.MovementKind
  }

  export type EnumFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.Frequency
  }

  export type SimulationUpdateOneRequiredWithoutMovementsNestedInput = {
    create?: XOR<SimulationCreateWithoutMovementsInput, SimulationUncheckedCreateWithoutMovementsInput>
    connectOrCreate?: SimulationCreateOrConnectWithoutMovementsInput
    upsert?: SimulationUpsertWithoutMovementsInput
    connect?: SimulationWhereUniqueInput
    update?: XOR<XOR<SimulationUpdateToOneWithWhereWithoutMovementsInput, SimulationUpdateWithoutMovementsInput>, SimulationUncheckedUpdateWithoutMovementsInput>
  }

  export type SimulationCreateNestedOneWithoutInsurancesInput = {
    create?: XOR<SimulationCreateWithoutInsurancesInput, SimulationUncheckedCreateWithoutInsurancesInput>
    connectOrCreate?: SimulationCreateOrConnectWithoutInsurancesInput
    connect?: SimulationWhereUniqueInput
  }

  export type EnumInsuranceTypeFieldUpdateOperationsInput = {
    set?: $Enums.InsuranceType
  }

  export type SimulationUpdateOneRequiredWithoutInsurancesNestedInput = {
    create?: XOR<SimulationCreateWithoutInsurancesInput, SimulationUncheckedCreateWithoutInsurancesInput>
    connectOrCreate?: SimulationCreateOrConnectWithoutInsurancesInput
    upsert?: SimulationUpsertWithoutInsurancesInput
    connect?: SimulationWhereUniqueInput
    update?: XOR<XOR<SimulationUpdateToOneWithWhereWithoutInsurancesInput, SimulationUpdateWithoutInsurancesInput>, SimulationUncheckedUpdateWithoutInsurancesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumLifeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LifeStatus | EnumLifeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LifeStatus[] | ListEnumLifeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LifeStatus[] | ListEnumLifeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLifeStatusFilter<$PrismaModel> | $Enums.LifeStatus
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumLifeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LifeStatus | EnumLifeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LifeStatus[] | ListEnumLifeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LifeStatus[] | ListEnumLifeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLifeStatusWithAggregatesFilter<$PrismaModel> | $Enums.LifeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLifeStatusFilter<$PrismaModel>
    _max?: NestedEnumLifeStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumAllocationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AllocationType | EnumAllocationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AllocationType[] | ListEnumAllocationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AllocationType[] | ListEnumAllocationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAllocationTypeFilter<$PrismaModel> | $Enums.AllocationType
  }

  export type NestedEnumAllocationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AllocationType | EnumAllocationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AllocationType[] | ListEnumAllocationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AllocationType[] | ListEnumAllocationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAllocationTypeWithAggregatesFilter<$PrismaModel> | $Enums.AllocationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAllocationTypeFilter<$PrismaModel>
    _max?: NestedEnumAllocationTypeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumMovementKindFilter<$PrismaModel = never> = {
    equals?: $Enums.MovementKind | EnumMovementKindFieldRefInput<$PrismaModel>
    in?: $Enums.MovementKind[] | ListEnumMovementKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.MovementKind[] | ListEnumMovementKindFieldRefInput<$PrismaModel>
    not?: NestedEnumMovementKindFilter<$PrismaModel> | $Enums.MovementKind
  }

  export type NestedEnumFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumFrequencyFilter<$PrismaModel> | $Enums.Frequency
  }

  export type NestedEnumMovementKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MovementKind | EnumMovementKindFieldRefInput<$PrismaModel>
    in?: $Enums.MovementKind[] | ListEnumMovementKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.MovementKind[] | ListEnumMovementKindFieldRefInput<$PrismaModel>
    not?: NestedEnumMovementKindWithAggregatesFilter<$PrismaModel> | $Enums.MovementKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMovementKindFilter<$PrismaModel>
    _max?: NestedEnumMovementKindFilter<$PrismaModel>
  }

  export type NestedEnumFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.Frequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFrequencyFilter<$PrismaModel>
    _max?: NestedEnumFrequencyFilter<$PrismaModel>
  }

  export type NestedEnumInsuranceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InsuranceType | EnumInsuranceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInsuranceTypeFilter<$PrismaModel> | $Enums.InsuranceType
  }

  export type NestedEnumInsuranceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InsuranceType | EnumInsuranceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInsuranceTypeWithAggregatesFilter<$PrismaModel> | $Enums.InsuranceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInsuranceTypeFilter<$PrismaModel>
    _max?: NestedEnumInsuranceTypeFilter<$PrismaModel>
  }

  export type SimulationCreateWithoutChildrenInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: SimulationCreateNestedOneWithoutChildrenInput
    allocations?: AllocationCreateNestedManyWithoutSimulationInput
    movements?: MovementCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceCreateNestedManyWithoutSimulationInput
  }

  export type SimulationUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    allocations?: AllocationUncheckedCreateNestedManyWithoutSimulationInput
    movements?: MovementUncheckedCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceUncheckedCreateNestedManyWithoutSimulationInput
  }

  export type SimulationCreateOrConnectWithoutChildrenInput = {
    where: SimulationWhereUniqueInput
    create: XOR<SimulationCreateWithoutChildrenInput, SimulationUncheckedCreateWithoutChildrenInput>
  }

  export type SimulationCreateWithoutParentInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SimulationCreateNestedManyWithoutParentInput
    allocations?: AllocationCreateNestedManyWithoutSimulationInput
    movements?: MovementCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceCreateNestedManyWithoutSimulationInput
  }

  export type SimulationUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SimulationUncheckedCreateNestedManyWithoutParentInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutSimulationInput
    movements?: MovementUncheckedCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceUncheckedCreateNestedManyWithoutSimulationInput
  }

  export type SimulationCreateOrConnectWithoutParentInput = {
    where: SimulationWhereUniqueInput
    create: XOR<SimulationCreateWithoutParentInput, SimulationUncheckedCreateWithoutParentInput>
  }

  export type SimulationCreateManyParentInputEnvelope = {
    data: SimulationCreateManyParentInput | SimulationCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type AllocationCreateWithoutSimulationInput = {
    id?: string
    type: $Enums.AllocationType
    name: string
    createdAt?: Date | string
    records?: AllocationRecordCreateNestedManyWithoutAllocationInput
  }

  export type AllocationUncheckedCreateWithoutSimulationInput = {
    id?: string
    type: $Enums.AllocationType
    name: string
    createdAt?: Date | string
    records?: AllocationRecordUncheckedCreateNestedManyWithoutAllocationInput
  }

  export type AllocationCreateOrConnectWithoutSimulationInput = {
    where: AllocationWhereUniqueInput
    create: XOR<AllocationCreateWithoutSimulationInput, AllocationUncheckedCreateWithoutSimulationInput>
  }

  export type AllocationCreateManySimulationInputEnvelope = {
    data: AllocationCreateManySimulationInput | AllocationCreateManySimulationInput[]
    skipDuplicates?: boolean
  }

  export type MovementCreateWithoutSimulationInput = {
    id?: string
    kind: $Enums.MovementKind
    name: string
    amount: Decimal | DecimalJsLike | number | string
    frequency: $Enums.Frequency
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type MovementUncheckedCreateWithoutSimulationInput = {
    id?: string
    kind: $Enums.MovementKind
    name: string
    amount: Decimal | DecimalJsLike | number | string
    frequency: $Enums.Frequency
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type MovementCreateOrConnectWithoutSimulationInput = {
    where: MovementWhereUniqueInput
    create: XOR<MovementCreateWithoutSimulationInput, MovementUncheckedCreateWithoutSimulationInput>
  }

  export type MovementCreateManySimulationInputEnvelope = {
    data: MovementCreateManySimulationInput | MovementCreateManySimulationInput[]
    skipDuplicates?: boolean
  }

  export type InsuranceCreateWithoutSimulationInput = {
    id?: string
    name: string
    type: $Enums.InsuranceType
    startDate: Date | string
    durationMonths: number
    premiumMonth: Decimal | DecimalJsLike | number | string
    insuredValue: Decimal | DecimalJsLike | number | string
  }

  export type InsuranceUncheckedCreateWithoutSimulationInput = {
    id?: string
    name: string
    type: $Enums.InsuranceType
    startDate: Date | string
    durationMonths: number
    premiumMonth: Decimal | DecimalJsLike | number | string
    insuredValue: Decimal | DecimalJsLike | number | string
  }

  export type InsuranceCreateOrConnectWithoutSimulationInput = {
    where: InsuranceWhereUniqueInput
    create: XOR<InsuranceCreateWithoutSimulationInput, InsuranceUncheckedCreateWithoutSimulationInput>
  }

  export type InsuranceCreateManySimulationInputEnvelope = {
    data: InsuranceCreateManySimulationInput | InsuranceCreateManySimulationInput[]
    skipDuplicates?: boolean
  }

  export type SimulationUpsertWithoutChildrenInput = {
    update: XOR<SimulationUpdateWithoutChildrenInput, SimulationUncheckedUpdateWithoutChildrenInput>
    create: XOR<SimulationCreateWithoutChildrenInput, SimulationUncheckedCreateWithoutChildrenInput>
    where?: SimulationWhereInput
  }

  export type SimulationUpdateToOneWithWhereWithoutChildrenInput = {
    where?: SimulationWhereInput
    data: XOR<SimulationUpdateWithoutChildrenInput, SimulationUncheckedUpdateWithoutChildrenInput>
  }

  export type SimulationUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: SimulationUpdateOneWithoutChildrenNestedInput
    allocations?: AllocationUpdateManyWithoutSimulationNestedInput
    movements?: MovementUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allocations?: AllocationUncheckedUpdateManyWithoutSimulationNestedInput
    movements?: MovementUncheckedUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUncheckedUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationUpsertWithWhereUniqueWithoutParentInput = {
    where: SimulationWhereUniqueInput
    update: XOR<SimulationUpdateWithoutParentInput, SimulationUncheckedUpdateWithoutParentInput>
    create: XOR<SimulationCreateWithoutParentInput, SimulationUncheckedCreateWithoutParentInput>
  }

  export type SimulationUpdateWithWhereUniqueWithoutParentInput = {
    where: SimulationWhereUniqueInput
    data: XOR<SimulationUpdateWithoutParentInput, SimulationUncheckedUpdateWithoutParentInput>
  }

  export type SimulationUpdateManyWithWhereWithoutParentInput = {
    where: SimulationScalarWhereInput
    data: XOR<SimulationUpdateManyMutationInput, SimulationUncheckedUpdateManyWithoutParentInput>
  }

  export type SimulationScalarWhereInput = {
    AND?: SimulationScalarWhereInput | SimulationScalarWhereInput[]
    OR?: SimulationScalarWhereInput[]
    NOT?: SimulationScalarWhereInput | SimulationScalarWhereInput[]
    id?: StringFilter<"Simulation"> | string
    name?: StringFilter<"Simulation"> | string
    version?: IntFilter<"Simulation"> | number
    isMain?: BoolFilter<"Simulation"> | boolean
    isSituationNow?: BoolFilter<"Simulation"> | boolean
    startDate?: DateTimeFilter<"Simulation"> | Date | string
    realRate?: FloatFilter<"Simulation"> | number
    lifeStatus?: EnumLifeStatusFilter<"Simulation"> | $Enums.LifeStatus
    parentId?: StringNullableFilter<"Simulation"> | string | null
    createdAt?: DateTimeFilter<"Simulation"> | Date | string
    updatedAt?: DateTimeFilter<"Simulation"> | Date | string
  }

  export type AllocationUpsertWithWhereUniqueWithoutSimulationInput = {
    where: AllocationWhereUniqueInput
    update: XOR<AllocationUpdateWithoutSimulationInput, AllocationUncheckedUpdateWithoutSimulationInput>
    create: XOR<AllocationCreateWithoutSimulationInput, AllocationUncheckedCreateWithoutSimulationInput>
  }

  export type AllocationUpdateWithWhereUniqueWithoutSimulationInput = {
    where: AllocationWhereUniqueInput
    data: XOR<AllocationUpdateWithoutSimulationInput, AllocationUncheckedUpdateWithoutSimulationInput>
  }

  export type AllocationUpdateManyWithWhereWithoutSimulationInput = {
    where: AllocationScalarWhereInput
    data: XOR<AllocationUpdateManyMutationInput, AllocationUncheckedUpdateManyWithoutSimulationInput>
  }

  export type AllocationScalarWhereInput = {
    AND?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
    OR?: AllocationScalarWhereInput[]
    NOT?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
    id?: StringFilter<"Allocation"> | string
    simulationId?: StringFilter<"Allocation"> | string
    type?: EnumAllocationTypeFilter<"Allocation"> | $Enums.AllocationType
    name?: StringFilter<"Allocation"> | string
    createdAt?: DateTimeFilter<"Allocation"> | Date | string
  }

  export type MovementUpsertWithWhereUniqueWithoutSimulationInput = {
    where: MovementWhereUniqueInput
    update: XOR<MovementUpdateWithoutSimulationInput, MovementUncheckedUpdateWithoutSimulationInput>
    create: XOR<MovementCreateWithoutSimulationInput, MovementUncheckedCreateWithoutSimulationInput>
  }

  export type MovementUpdateWithWhereUniqueWithoutSimulationInput = {
    where: MovementWhereUniqueInput
    data: XOR<MovementUpdateWithoutSimulationInput, MovementUncheckedUpdateWithoutSimulationInput>
  }

  export type MovementUpdateManyWithWhereWithoutSimulationInput = {
    where: MovementScalarWhereInput
    data: XOR<MovementUpdateManyMutationInput, MovementUncheckedUpdateManyWithoutSimulationInput>
  }

  export type MovementScalarWhereInput = {
    AND?: MovementScalarWhereInput | MovementScalarWhereInput[]
    OR?: MovementScalarWhereInput[]
    NOT?: MovementScalarWhereInput | MovementScalarWhereInput[]
    id?: StringFilter<"Movement"> | string
    simulationId?: StringFilter<"Movement"> | string
    kind?: EnumMovementKindFilter<"Movement"> | $Enums.MovementKind
    name?: StringFilter<"Movement"> | string
    amount?: DecimalFilter<"Movement"> | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFilter<"Movement"> | $Enums.Frequency
    startDate?: DateTimeFilter<"Movement"> | Date | string
    endDate?: DateTimeNullableFilter<"Movement"> | Date | string | null
    createdAt?: DateTimeFilter<"Movement"> | Date | string
  }

  export type InsuranceUpsertWithWhereUniqueWithoutSimulationInput = {
    where: InsuranceWhereUniqueInput
    update: XOR<InsuranceUpdateWithoutSimulationInput, InsuranceUncheckedUpdateWithoutSimulationInput>
    create: XOR<InsuranceCreateWithoutSimulationInput, InsuranceUncheckedCreateWithoutSimulationInput>
  }

  export type InsuranceUpdateWithWhereUniqueWithoutSimulationInput = {
    where: InsuranceWhereUniqueInput
    data: XOR<InsuranceUpdateWithoutSimulationInput, InsuranceUncheckedUpdateWithoutSimulationInput>
  }

  export type InsuranceUpdateManyWithWhereWithoutSimulationInput = {
    where: InsuranceScalarWhereInput
    data: XOR<InsuranceUpdateManyMutationInput, InsuranceUncheckedUpdateManyWithoutSimulationInput>
  }

  export type InsuranceScalarWhereInput = {
    AND?: InsuranceScalarWhereInput | InsuranceScalarWhereInput[]
    OR?: InsuranceScalarWhereInput[]
    NOT?: InsuranceScalarWhereInput | InsuranceScalarWhereInput[]
    id?: StringFilter<"Insurance"> | string
    simulationId?: StringFilter<"Insurance"> | string
    name?: StringFilter<"Insurance"> | string
    type?: EnumInsuranceTypeFilter<"Insurance"> | $Enums.InsuranceType
    startDate?: DateTimeFilter<"Insurance"> | Date | string
    durationMonths?: IntFilter<"Insurance"> | number
    premiumMonth?: DecimalFilter<"Insurance"> | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFilter<"Insurance"> | Decimal | DecimalJsLike | number | string
  }

  export type AllocationRecordCreateWithoutAllocationInput = {
    id?: string
    date: Date | string
    value: Decimal | DecimalJsLike | number | string
    hasLoan?: boolean
    loanStart?: Date | string | null
    loanInstallments?: number | null
    loanRate?: number | null
    downPayment?: Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRecordUncheckedCreateWithoutAllocationInput = {
    id?: string
    date: Date | string
    value: Decimal | DecimalJsLike | number | string
    hasLoan?: boolean
    loanStart?: Date | string | null
    loanInstallments?: number | null
    loanRate?: number | null
    downPayment?: Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRecordCreateOrConnectWithoutAllocationInput = {
    where: AllocationRecordWhereUniqueInput
    create: XOR<AllocationRecordCreateWithoutAllocationInput, AllocationRecordUncheckedCreateWithoutAllocationInput>
  }

  export type AllocationRecordCreateManyAllocationInputEnvelope = {
    data: AllocationRecordCreateManyAllocationInput | AllocationRecordCreateManyAllocationInput[]
    skipDuplicates?: boolean
  }

  export type SimulationCreateWithoutAllocationsInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: SimulationCreateNestedOneWithoutChildrenInput
    children?: SimulationCreateNestedManyWithoutParentInput
    movements?: MovementCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceCreateNestedManyWithoutSimulationInput
  }

  export type SimulationUncheckedCreateWithoutAllocationsInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SimulationUncheckedCreateNestedManyWithoutParentInput
    movements?: MovementUncheckedCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceUncheckedCreateNestedManyWithoutSimulationInput
  }

  export type SimulationCreateOrConnectWithoutAllocationsInput = {
    where: SimulationWhereUniqueInput
    create: XOR<SimulationCreateWithoutAllocationsInput, SimulationUncheckedCreateWithoutAllocationsInput>
  }

  export type AllocationRecordUpsertWithWhereUniqueWithoutAllocationInput = {
    where: AllocationRecordWhereUniqueInput
    update: XOR<AllocationRecordUpdateWithoutAllocationInput, AllocationRecordUncheckedUpdateWithoutAllocationInput>
    create: XOR<AllocationRecordCreateWithoutAllocationInput, AllocationRecordUncheckedCreateWithoutAllocationInput>
  }

  export type AllocationRecordUpdateWithWhereUniqueWithoutAllocationInput = {
    where: AllocationRecordWhereUniqueInput
    data: XOR<AllocationRecordUpdateWithoutAllocationInput, AllocationRecordUncheckedUpdateWithoutAllocationInput>
  }

  export type AllocationRecordUpdateManyWithWhereWithoutAllocationInput = {
    where: AllocationRecordScalarWhereInput
    data: XOR<AllocationRecordUpdateManyMutationInput, AllocationRecordUncheckedUpdateManyWithoutAllocationInput>
  }

  export type AllocationRecordScalarWhereInput = {
    AND?: AllocationRecordScalarWhereInput | AllocationRecordScalarWhereInput[]
    OR?: AllocationRecordScalarWhereInput[]
    NOT?: AllocationRecordScalarWhereInput | AllocationRecordScalarWhereInput[]
    id?: StringFilter<"AllocationRecord"> | string
    allocationId?: StringFilter<"AllocationRecord"> | string
    date?: DateTimeFilter<"AllocationRecord"> | Date | string
    value?: DecimalFilter<"AllocationRecord"> | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFilter<"AllocationRecord"> | boolean
    loanStart?: DateTimeNullableFilter<"AllocationRecord"> | Date | string | null
    loanInstallments?: IntNullableFilter<"AllocationRecord"> | number | null
    loanRate?: FloatNullableFilter<"AllocationRecord"> | number | null
    downPayment?: DecimalNullableFilter<"AllocationRecord"> | Decimal | DecimalJsLike | number | string | null
  }

  export type SimulationUpsertWithoutAllocationsInput = {
    update: XOR<SimulationUpdateWithoutAllocationsInput, SimulationUncheckedUpdateWithoutAllocationsInput>
    create: XOR<SimulationCreateWithoutAllocationsInput, SimulationUncheckedCreateWithoutAllocationsInput>
    where?: SimulationWhereInput
  }

  export type SimulationUpdateToOneWithWhereWithoutAllocationsInput = {
    where?: SimulationWhereInput
    data: XOR<SimulationUpdateWithoutAllocationsInput, SimulationUncheckedUpdateWithoutAllocationsInput>
  }

  export type SimulationUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: SimulationUpdateOneWithoutChildrenNestedInput
    children?: SimulationUpdateManyWithoutParentNestedInput
    movements?: MovementUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationUncheckedUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SimulationUncheckedUpdateManyWithoutParentNestedInput
    movements?: MovementUncheckedUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUncheckedUpdateManyWithoutSimulationNestedInput
  }

  export type AllocationCreateWithoutRecordsInput = {
    id?: string
    type: $Enums.AllocationType
    name: string
    createdAt?: Date | string
    simulation: SimulationCreateNestedOneWithoutAllocationsInput
  }

  export type AllocationUncheckedCreateWithoutRecordsInput = {
    id?: string
    simulationId: string
    type: $Enums.AllocationType
    name: string
    createdAt?: Date | string
  }

  export type AllocationCreateOrConnectWithoutRecordsInput = {
    where: AllocationWhereUniqueInput
    create: XOR<AllocationCreateWithoutRecordsInput, AllocationUncheckedCreateWithoutRecordsInput>
  }

  export type AllocationUpsertWithoutRecordsInput = {
    update: XOR<AllocationUpdateWithoutRecordsInput, AllocationUncheckedUpdateWithoutRecordsInput>
    create: XOR<AllocationCreateWithoutRecordsInput, AllocationUncheckedCreateWithoutRecordsInput>
    where?: AllocationWhereInput
  }

  export type AllocationUpdateToOneWithWhereWithoutRecordsInput = {
    where?: AllocationWhereInput
    data: XOR<AllocationUpdateWithoutRecordsInput, AllocationUncheckedUpdateWithoutRecordsInput>
  }

  export type AllocationUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAllocationTypeFieldUpdateOperationsInput | $Enums.AllocationType
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    simulation?: SimulationUpdateOneRequiredWithoutAllocationsNestedInput
  }

  export type AllocationUncheckedUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    simulationId?: StringFieldUpdateOperationsInput | string
    type?: EnumAllocationTypeFieldUpdateOperationsInput | $Enums.AllocationType
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SimulationCreateWithoutMovementsInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: SimulationCreateNestedOneWithoutChildrenInput
    children?: SimulationCreateNestedManyWithoutParentInput
    allocations?: AllocationCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceCreateNestedManyWithoutSimulationInput
  }

  export type SimulationUncheckedCreateWithoutMovementsInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SimulationUncheckedCreateNestedManyWithoutParentInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutSimulationInput
    insurances?: InsuranceUncheckedCreateNestedManyWithoutSimulationInput
  }

  export type SimulationCreateOrConnectWithoutMovementsInput = {
    where: SimulationWhereUniqueInput
    create: XOR<SimulationCreateWithoutMovementsInput, SimulationUncheckedCreateWithoutMovementsInput>
  }

  export type SimulationUpsertWithoutMovementsInput = {
    update: XOR<SimulationUpdateWithoutMovementsInput, SimulationUncheckedUpdateWithoutMovementsInput>
    create: XOR<SimulationCreateWithoutMovementsInput, SimulationUncheckedCreateWithoutMovementsInput>
    where?: SimulationWhereInput
  }

  export type SimulationUpdateToOneWithWhereWithoutMovementsInput = {
    where?: SimulationWhereInput
    data: XOR<SimulationUpdateWithoutMovementsInput, SimulationUncheckedUpdateWithoutMovementsInput>
  }

  export type SimulationUpdateWithoutMovementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: SimulationUpdateOneWithoutChildrenNestedInput
    children?: SimulationUpdateManyWithoutParentNestedInput
    allocations?: AllocationUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationUncheckedUpdateWithoutMovementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SimulationUncheckedUpdateManyWithoutParentNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUncheckedUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationCreateWithoutInsurancesInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: SimulationCreateNestedOneWithoutChildrenInput
    children?: SimulationCreateNestedManyWithoutParentInput
    allocations?: AllocationCreateNestedManyWithoutSimulationInput
    movements?: MovementCreateNestedManyWithoutSimulationInput
  }

  export type SimulationUncheckedCreateWithoutInsurancesInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: SimulationUncheckedCreateNestedManyWithoutParentInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutSimulationInput
    movements?: MovementUncheckedCreateNestedManyWithoutSimulationInput
  }

  export type SimulationCreateOrConnectWithoutInsurancesInput = {
    where: SimulationWhereUniqueInput
    create: XOR<SimulationCreateWithoutInsurancesInput, SimulationUncheckedCreateWithoutInsurancesInput>
  }

  export type SimulationUpsertWithoutInsurancesInput = {
    update: XOR<SimulationUpdateWithoutInsurancesInput, SimulationUncheckedUpdateWithoutInsurancesInput>
    create: XOR<SimulationCreateWithoutInsurancesInput, SimulationUncheckedCreateWithoutInsurancesInput>
    where?: SimulationWhereInput
  }

  export type SimulationUpdateToOneWithWhereWithoutInsurancesInput = {
    where?: SimulationWhereInput
    data: XOR<SimulationUpdateWithoutInsurancesInput, SimulationUncheckedUpdateWithoutInsurancesInput>
  }

  export type SimulationUpdateWithoutInsurancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: SimulationUpdateOneWithoutChildrenNestedInput
    children?: SimulationUpdateManyWithoutParentNestedInput
    allocations?: AllocationUpdateManyWithoutSimulationNestedInput
    movements?: MovementUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationUncheckedUpdateWithoutInsurancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SimulationUncheckedUpdateManyWithoutParentNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutSimulationNestedInput
    movements?: MovementUncheckedUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationCreateManyParentInput = {
    id?: string
    name: string
    version?: number
    isMain?: boolean
    isSituationNow?: boolean
    startDate: Date | string
    realRate?: number
    lifeStatus?: $Enums.LifeStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AllocationCreateManySimulationInput = {
    id?: string
    type: $Enums.AllocationType
    name: string
    createdAt?: Date | string
  }

  export type MovementCreateManySimulationInput = {
    id?: string
    kind: $Enums.MovementKind
    name: string
    amount: Decimal | DecimalJsLike | number | string
    frequency: $Enums.Frequency
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type InsuranceCreateManySimulationInput = {
    id?: string
    name: string
    type: $Enums.InsuranceType
    startDate: Date | string
    durationMonths: number
    premiumMonth: Decimal | DecimalJsLike | number | string
    insuredValue: Decimal | DecimalJsLike | number | string
  }

  export type SimulationUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SimulationUpdateManyWithoutParentNestedInput
    allocations?: AllocationUpdateManyWithoutSimulationNestedInput
    movements?: MovementUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: SimulationUncheckedUpdateManyWithoutParentNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutSimulationNestedInput
    movements?: MovementUncheckedUpdateManyWithoutSimulationNestedInput
    insurances?: InsuranceUncheckedUpdateManyWithoutSimulationNestedInput
  }

  export type SimulationUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    isMain?: BoolFieldUpdateOperationsInput | boolean
    isSituationNow?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    realRate?: FloatFieldUpdateOperationsInput | number
    lifeStatus?: EnumLifeStatusFieldUpdateOperationsInput | $Enums.LifeStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllocationUpdateWithoutSimulationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAllocationTypeFieldUpdateOperationsInput | $Enums.AllocationType
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: AllocationRecordUpdateManyWithoutAllocationNestedInput
  }

  export type AllocationUncheckedUpdateWithoutSimulationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAllocationTypeFieldUpdateOperationsInput | $Enums.AllocationType
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    records?: AllocationRecordUncheckedUpdateManyWithoutAllocationNestedInput
  }

  export type AllocationUncheckedUpdateManyWithoutSimulationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAllocationTypeFieldUpdateOperationsInput | $Enums.AllocationType
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovementUpdateWithoutSimulationInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumMovementKindFieldUpdateOperationsInput | $Enums.MovementKind
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovementUncheckedUpdateWithoutSimulationInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumMovementKindFieldUpdateOperationsInput | $Enums.MovementKind
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovementUncheckedUpdateManyWithoutSimulationInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: EnumMovementKindFieldUpdateOperationsInput | $Enums.MovementKind
    name?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceUpdateWithoutSimulationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    premiumMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InsuranceUncheckedUpdateWithoutSimulationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    premiumMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InsuranceUncheckedUpdateManyWithoutSimulationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    premiumMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuredValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type AllocationRecordCreateManyAllocationInput = {
    id?: string
    date: Date | string
    value: Decimal | DecimalJsLike | number | string
    hasLoan?: boolean
    loanStart?: Date | string | null
    loanInstallments?: number | null
    loanRate?: number | null
    downPayment?: Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRecordUpdateWithoutAllocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFieldUpdateOperationsInput | boolean
    loanStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanInstallments?: NullableIntFieldUpdateOperationsInput | number | null
    loanRate?: NullableFloatFieldUpdateOperationsInput | number | null
    downPayment?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRecordUncheckedUpdateWithoutAllocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFieldUpdateOperationsInput | boolean
    loanStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanInstallments?: NullableIntFieldUpdateOperationsInput | number | null
    loanRate?: NullableFloatFieldUpdateOperationsInput | number | null
    downPayment?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type AllocationRecordUncheckedUpdateManyWithoutAllocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasLoan?: BoolFieldUpdateOperationsInput | boolean
    loanStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanInstallments?: NullableIntFieldUpdateOperationsInput | number | null
    loanRate?: NullableFloatFieldUpdateOperationsInput | number | null
    downPayment?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SimulationCountOutputTypeDefaultArgs instead
     */
    export type SimulationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SimulationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllocationCountOutputTypeDefaultArgs instead
     */
    export type AllocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SimulationDefaultArgs instead
     */
    export type SimulationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SimulationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllocationDefaultArgs instead
     */
    export type AllocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllocationRecordDefaultArgs instead
     */
    export type AllocationRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllocationRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovementDefaultArgs instead
     */
    export type MovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InsuranceDefaultArgs instead
     */
    export type InsuranceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InsuranceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}